//
// @author Maduka Attamah
//
// Copyright 2011-2012 Maduka Attamah
//

package vdel.scanners;

/* The following code was generated by JFlex 1.4.3 on 8/17/12 12:19 PM */

/* JFlex example: part of Java language lexer specification */

import vdel.symbols.BaseSym;
import vdel.symbols.ECESym;
import vdel.symbols.CESym;
import java_cup.runtime.*;

/**
 * This class is a simple example lexer.
 */

public class BaseScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int KN_IDENTIFIER = 2;
  public static final int PHISTATE_KN_CONSTRAINT = 14;
  public static final int EPISTEMIC_CONSTRAINT = 10;
  public static final int AG_IDENTIFIER = 4;
  public static final int CONSTRAINT = 8;
  public static final int YYINITIAL = 0;
  public static final int PHISTATE = 12;
  public static final int KNOWS_STATE = 16;
  public static final int EP_KN_IDENTIFIER = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\43"+
    "\1\0\1\56\1\6\1\60\1\55\1\0\1\45\1\46\1\5\1\51"+
    "\1\47\1\52\1\12\1\4\1\10\11\11\1\57\1\42\1\53\1\44"+
    "\1\54\1\0\1\27\32\6\1\40\1\0\1\61\1\0\1\6\1\0"+
    "\1\23\1\13\1\35\1\20\1\14\1\33\1\15\1\6\1\16\2\6"+
    "\1\22\1\26\1\17\1\21\1\36\1\34\1\31\1\30\1\24\1\25"+
    "\1\32\2\6\1\37\1\6\1\41\1\50\1\62\1\0\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0"+
    "\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0"+
    "\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0"+
    "\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0"+
    "\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7"+
    "\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6"+
    "\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0"+
    "\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7"+
    "\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6"+
    "\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7"+
    "\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7"+
    "\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7"+
    "\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6"+
    "\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0"+
    "\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0"+
    "\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\2\1\3\1\4\1\5\2\6\7\5"+
    "\1\7\3\5\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\1"+
    "\1\25\1\1\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\34\1\35\2\34\1\36\1\37\1\1\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\1\1\47\1\1"+
    "\1\50\1\51\1\52\1\53\2\54\3\53\1\55\1\56"+
    "\1\1\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\1\1\66\1\32\1\67\2\70\1\67\1\71\2\67"+
    "\1\72\1\1\1\73\1\74\1\75\4\76\1\77\1\1"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\1"+
    "\1\107\1\110\1\111\1\112\2\113\3\112\1\114\1\1"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\1"+
    "\1\124\3\125\4\0\14\5\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\3\34\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\2\0\3\53\1\146"+
    "\1\147\1\150\1\151\1\152\1\153\1\154\2\0\3\67"+
    "\1\155\3\76\1\156\1\157\1\160\1\161\1\162\1\163"+
    "\1\164\2\0\3\112\1\165\1\166\1\167\1\170\1\171"+
    "\1\172\1\173\2\125\2\0\2\6\2\5\1\174\2\5"+
    "\1\175\4\5\1\176\2\5\1\34\1\177\1\34\2\54"+
    "\1\53\1\200\1\53\2\70\1\67\1\177\1\67\1\76"+
    "\1\201\1\76\2\113\1\112\1\202\1\112\2\125\1\0"+
    "\2\5\1\203\4\5\1\204\1\205\2\5\1\206\1\207"+
    "\1\34\1\210\1\211\1\53\1\206\1\207\1\67\1\212"+
    "\1\213\1\76\1\214\1\215\1\112\1\204\1\125\1\216"+
    "\4\5\1\217\1\220\1\5\1\221\1\222\1\221\1\223"+
    "\1\224\1\220\5\5\1\225\1\5\1\226\3\5\1\227"+
    "\1\5\1\230\1\5\1\231";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u01cb\0\u0231\0\u01cb\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u01cb\0\u0462\0\u0495\0\u04c8\0\u01cb\0\u01cb\0\u01cb\0\u04fb"+
    "\0\u052e\0\u01cb\0\u01cb\0\u01cb\0\u0561\0\u01cb\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u01cb\0\u0660\0\u0693\0\u01cb\0\u01cb\0\u06c6"+
    "\0\u0231\0\u01cb\0\u06f9\0\u072c\0\u01cb\0\u075f\0\u0792\0\u01cb"+
    "\0\u07c5\0\u07f8\0\u01cb\0\u01cb\0\u082b\0\u01cb\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u01cb\0\u092a\0\u01cb\0\u01cb\0\u01cb\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u01cb\0\u0a8f\0\u0ac2"+
    "\0\u01cb\0\u01cb\0\u0af5\0\u01cb\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u01cb\0\u01cb\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u01cb\0\u0cc0"+
    "\0\u0cf3\0\u01cb\0\u0d26\0\u01cb\0\u0231\0\u01cb\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u01cb\0\u01cb\0\u0e8b\0\u01cb"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u01cb\0\u0231\0\u01cb\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u01cb"+
    "\0\u01cb\0\u1122\0\u01cb\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u01cb"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u01cb\0\u15ea\0\u161d\0\u1650\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u01cb"+
    "\0\u1881\0\u18b4\0\u18e7\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u01cb"+
    "\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u01cb\0\u1353\0\u1ae5\0\u1b18\0\u0264\0\u1b4b"+
    "\0\u1b7e\0\u0264\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u01cb\0\u16b6\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u01cb\0\u17b5\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u01cb\0\u194d\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u20ac\0\u20df\0\u0264\0\u2112\0\u2145\0\u2178\0\u21ab"+
    "\0\u0264\0\u0264\0\u21de\0\u2211\0\u06f9\0\u06f9\0\u2244\0\u095d"+
    "\0\u095d\0\u2277\0\u0bf4\0\u0bf4\0\u22aa\0\u0d59\0\u0d59\0\u22dd"+
    "\0\u0f8a\0\u0f8a\0\u2310\0\u1221\0\u2343\0\u0264\0\u2376\0\u23a9"+
    "\0\u23dc\0\u240f\0\u0264\0\u0264\0\u2442\0\u06f9\0\u095d\0\u0bf4"+
    "\0\u0d59\0\u0f8a\0\u1221\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u0264\0\u2574\0\u0264\0\u25a7\0\u25da\0\u260d\0\u0264\0\u2640"+
    "\0\u0264\0\u2673\0\u0264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\12\1\20"+
    "\1\21\1\12\1\22\1\23\1\17\1\24\1\17\1\25"+
    "\1\26\1\17\1\27\1\30\2\17\1\31\1\32\2\17"+
    "\1\33\1\17\1\34\2\17\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\4\12\1\13\2\14\1\15"+
    "\1\16\1\55\4\12\14\55\1\56\10\55\1\57\1\12"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\4\12\1\13"+
    "\2\14\1\15\1\16\1\60\1\12\1\20\1\21\1\12"+
    "\14\60\1\56\10\60\2\12\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\4\12\1\13\2\14\1\61\1\62\1\63"+
    "\4\12\11\63\1\64\2\63\1\65\1\66\2\63\1\67"+
    "\4\63\2\12\1\70\1\71\1\72\1\73\1\74\1\12"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\3\12\1\13\2\14\1\106\1\107\1\110\1\12"+
    "\1\111\1\112\1\12\11\110\1\113\2\110\1\12\1\114"+
    "\2\110\1\115\4\110\2\12\1\116\1\117\1\120\1\121"+
    "\1\122\1\12\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\3\12\1\131\2\12\1\13\2\14\1\132\1\62\1\133"+
    "\1\12\1\134\1\135\1\12\11\133\1\136\2\133\1\137"+
    "\1\140\2\133\1\141\4\133\2\12\1\70\1\71\1\72"+
    "\1\73\1\74\1\12\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\142\1\143\2\12\1\144\1\12\1\13\2\14"+
    "\1\145\1\146\1\147\1\12\1\20\1\21\1\12\11\147"+
    "\1\150\2\147\1\12\1\151\2\147\1\152\4\147\3\12"+
    "\1\153\1\154\1\155\1\156\1\12\1\157\1\160\1\161"+
    "\1\162\1\163\1\164\3\12\1\165\2\12\1\13\2\14"+
    "\1\166\1\167\1\170\1\12\1\171\1\172\1\12\11\170"+
    "\1\173\2\170\1\12\1\174\2\170\1\175\4\170\3\12"+
    "\1\176\1\177\1\200\1\201\1\12\1\202\1\203\1\204"+
    "\1\205\1\206\1\207\2\12\1\210\3\12\1\13\2\14"+
    "\1\15\1\16\1\211\4\12\11\211\1\212\2\211\1\56"+
    "\3\211\1\213\4\211\1\57\1\12\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\3\12\65\0\1\14\64\0\1\214"+
    "\1\215\63\0\4\17\1\0\14\17\1\0\10\17\35\0"+
    "\1\216\60\0\2\21\1\217\56\0\4\17\1\0\1\17"+
    "\1\220\4\17\1\221\5\17\1\0\10\17\31\0\4\17"+
    "\1\0\4\17\1\222\7\17\1\0\6\17\1\223\1\17"+
    "\31\0\4\17\1\0\4\17\1\224\7\17\1\0\10\17"+
    "\31\0\4\17\1\0\14\17\1\0\7\17\1\225\31\0"+
    "\4\17\1\0\1\226\13\17\1\0\10\17\31\0\4\17"+
    "\1\0\2\17\1\227\11\17\1\0\10\17\31\0\4\17"+
    "\1\0\14\17\1\0\1\17\1\230\6\17\31\0\4\17"+
    "\1\0\14\17\1\0\4\17\1\231\3\17\31\0\4\17"+
    "\1\0\10\17\1\232\3\17\1\0\10\17\31\0\4\17"+
    "\1\0\6\17\1\233\5\17\1\0\10\17\67\0\1\234"+
    "\62\0\1\235\66\0\1\236\66\0\1\237\52\0\1\240"+
    "\62\0\1\241\73\0\1\242\61\0\1\243\14\0\4\55"+
    "\1\0\14\55\1\0\10\55\31\0\4\60\1\0\14\60"+
    "\1\0\10\60\31\0\4\63\1\0\14\63\1\0\10\63"+
    "\31\0\4\63\1\0\14\63\1\0\1\63\1\244\6\63"+
    "\31\0\4\63\1\0\14\63\1\0\4\63\1\245\3\63"+
    "\31\0\4\63\1\0\10\63\1\246\3\63\1\0\10\63"+
    "\67\0\1\247\62\0\1\250\66\0\1\251\66\0\1\252"+
    "\52\0\1\253\62\0\1\254\73\0\1\255\61\0\1\256"+
    "\14\0\4\110\1\0\14\110\1\0\10\110\35\0\1\257"+
    "\60\0\2\112\1\260\56\0\4\110\1\0\14\110\1\0"+
    "\1\110\1\261\6\110\31\0\4\110\1\0\14\110\1\0"+
    "\4\110\1\262\3\110\31\0\4\110\1\0\10\110\1\263"+
    "\3\110\1\0\10\110\67\0\1\264\62\0\1\265\66\0"+
    "\1\266\66\0\1\267\52\0\1\270\62\0\1\271\73\0"+
    "\1\272\13\0\4\133\1\0\14\133\1\0\10\133\35\0"+
    "\1\273\60\0\2\135\1\274\56\0\4\133\1\0\14\133"+
    "\1\0\1\133\1\275\6\133\31\0\4\133\1\0\14\133"+
    "\1\0\4\133\1\276\3\133\31\0\4\133\1\0\10\133"+
    "\1\277\3\133\1\0\10\133\77\0\1\300\14\0\4\147"+
    "\1\0\14\147\1\0\10\147\31\0\4\147\1\0\14\147"+
    "\1\0\1\147\1\301\6\147\31\0\4\147\1\0\14\147"+
    "\1\0\4\147\1\302\3\147\31\0\4\147\1\0\10\147"+
    "\1\303\3\147\1\0\10\147\67\0\1\304\62\0\1\305"+
    "\66\0\1\306\66\0\1\307\52\0\1\310\62\0\1\311"+
    "\73\0\1\312\13\0\4\170\1\0\14\170\1\0\10\170"+
    "\35\0\1\313\60\0\2\172\1\314\56\0\4\170\1\0"+
    "\14\170\1\0\1\170\1\315\6\170\31\0\4\170\1\0"+
    "\14\170\1\0\4\170\1\316\3\170\31\0\4\170\1\0"+
    "\10\170\1\317\3\170\1\0\10\170\67\0\1\320\62\0"+
    "\1\321\66\0\1\322\66\0\1\323\52\0\1\324\62\0"+
    "\1\325\73\0\1\326\13\0\4\211\1\0\14\211\1\0"+
    "\10\211\31\0\4\211\1\0\14\211\1\0\1\211\1\327"+
    "\6\211\31\0\4\211\1\0\10\211\1\330\3\211\1\0"+
    "\10\211\23\0\1\214\1\13\1\14\60\214\5\331\1\332"+
    "\55\331\10\0\1\333\62\0\2\334\57\0\4\17\1\0"+
    "\2\17\1\335\11\17\1\0\10\17\31\0\4\17\1\0"+
    "\6\17\1\336\5\17\1\0\10\17\31\0\4\17\1\0"+
    "\5\17\1\337\4\17\1\340\1\17\1\0\10\17\31\0"+
    "\4\17\1\0\3\17\1\341\10\17\1\0\10\17\31\0"+
    "\4\17\1\0\11\17\1\342\2\17\1\0\10\17\31\0"+
    "\4\17\1\0\4\17\1\343\7\17\1\0\10\17\31\0"+
    "\4\17\1\0\14\17\1\0\1\344\7\17\31\0\4\17"+
    "\1\0\1\17\1\345\12\17\1\0\10\17\31\0\4\17"+
    "\1\0\12\17\1\346\1\17\1\0\10\17\31\0\4\17"+
    "\1\0\14\17\1\0\1\17\1\347\6\17\31\0\4\17"+
    "\1\0\7\17\1\350\4\17\1\0\10\17\31\0\4\17"+
    "\1\0\4\17\1\351\7\17\1\0\10\17\31\0\4\63"+
    "\1\0\12\63\1\352\1\63\1\0\10\63\31\0\4\63"+
    "\1\0\14\63\1\0\1\63\1\353\6\63\31\0\4\63"+
    "\1\0\7\63\1\354\4\63\1\0\10\63\33\0\1\355"+
    "\62\0\2\356\57\0\4\110\1\0\12\110\1\357\1\110"+
    "\1\0\10\110\31\0\4\110\1\0\14\110\1\0\1\110"+
    "\1\360\6\110\31\0\4\110\1\0\7\110\1\361\4\110"+
    "\1\0\10\110\33\0\1\362\62\0\2\363\57\0\4\133"+
    "\1\0\12\133\1\364\1\133\1\0\10\133\31\0\4\133"+
    "\1\0\14\133\1\0\1\133\1\365\6\133\31\0\4\133"+
    "\1\0\7\133\1\366\4\133\1\0\10\133\31\0\4\147"+
    "\1\0\12\147\1\367\1\147\1\0\10\147\31\0\4\147"+
    "\1\0\14\147\1\0\1\147\1\370\6\147\31\0\4\147"+
    "\1\0\7\147\1\371\4\147\1\0\10\147\33\0\1\372"+
    "\62\0\2\373\57\0\4\170\1\0\12\170\1\374\1\170"+
    "\1\0\10\170\31\0\4\170\1\0\14\170\1\0\1\170"+
    "\1\375\6\170\31\0\4\170\1\0\7\170\1\376\4\170"+
    "\1\0\10\170\31\0\4\211\1\0\12\211\1\377\1\211"+
    "\1\0\10\211\31\0\4\211\1\0\7\211\1\u0100\4\211"+
    "\1\0\10\211\23\0\5\331\1\u0101\55\331\4\0\1\14"+
    "\1\332\63\0\4\17\1\0\3\17\1\u0102\10\17\1\0"+
    "\10\17\31\0\4\17\1\0\7\17\1\u0103\4\17\1\0"+
    "\10\17\31\0\4\17\1\0\13\17\1\u0104\1\0\10\17"+
    "\31\0\4\17\1\0\14\17\1\0\1\u0105\7\17\31\0"+
    "\4\17\1\0\10\17\1\u0106\3\17\1\0\10\17\31\0"+
    "\4\17\1\0\1\17\1\u0107\12\17\1\0\10\17\31\0"+
    "\4\17\1\0\4\17\1\u0108\7\17\1\0\10\17\31\0"+
    "\4\17\1\0\1\17\1\u0109\12\17\1\0\10\17\31\0"+
    "\4\17\1\0\11\17\1\u010a\2\17\1\0\10\17\31\0"+
    "\4\17\1\0\14\17\1\0\1\u010b\7\17\31\0\4\17"+
    "\1\0\14\17\1\0\1\u010c\7\17\31\0\4\63\1\0"+
    "\1\63\1\u010d\12\63\1\0\10\63\31\0\4\63\1\0"+
    "\11\63\1\u010e\2\63\1\0\10\63\31\0\4\63\1\0"+
    "\14\63\1\0\1\u010f\7\63\31\0\4\110\1\0\1\110"+
    "\1\u0110\12\110\1\0\10\110\31\0\4\110\1\0\11\110"+
    "\1\u0111\2\110\1\0\10\110\31\0\4\110\1\0\14\110"+
    "\1\0\1\u0112\7\110\31\0\4\133\1\0\1\133\1\u0113"+
    "\12\133\1\0\10\133\31\0\4\133\1\0\11\133\1\u0114"+
    "\2\133\1\0\10\133\31\0\4\133\1\0\14\133\1\0"+
    "\1\u0115\7\133\31\0\4\147\1\0\1\147\1\u0116\12\147"+
    "\1\0\10\147\31\0\4\147\1\0\11\147\1\u0117\2\147"+
    "\1\0\10\147\31\0\4\147\1\0\14\147\1\0\1\u0118"+
    "\7\147\31\0\4\170\1\0\1\170\1\u0119\12\170\1\0"+
    "\10\170\31\0\4\170\1\0\11\170\1\u011a\2\170\1\0"+
    "\10\170\31\0\4\170\1\0\14\170\1\0\1\u011b\7\170"+
    "\31\0\4\211\1\0\1\211\1\u011c\12\211\1\0\10\211"+
    "\31\0\4\211\1\0\14\211\1\0\1\u011d\7\211\23\0"+
    "\4\331\1\14\1\u0101\55\331\6\0\4\17\1\0\4\17"+
    "\1\u011e\7\17\1\0\10\17\31\0\4\17\1\0\1\17"+
    "\1\u011f\12\17\1\0\10\17\31\0\4\17\1\0\11\17"+
    "\1\u0120\2\17\1\0\10\17\31\0\4\17\1\0\13\17"+
    "\1\u0121\1\0\10\17\31\0\4\17\1\0\14\17\1\0"+
    "\1\17\1\u0122\6\17\31\0\4\17\1\0\11\17\1\u0123"+
    "\2\17\1\0\10\17\31\0\4\17\1\0\1\17\1\u0124"+
    "\12\17\1\0\10\17\31\0\4\17\1\0\11\17\1\u0125"+
    "\2\17\1\0\10\17\31\0\4\63\1\0\1\63\1\u0126"+
    "\12\63\1\0\10\63\31\0\4\110\1\0\1\110\1\u0127"+
    "\12\110\1\0\10\110\31\0\4\133\1\0\1\133\1\u0128"+
    "\12\133\1\0\10\133\31\0\4\147\1\0\1\147\1\u0129"+
    "\12\147\1\0\10\147\31\0\4\170\1\0\1\170\1\u012a"+
    "\12\170\1\0\10\170\31\0\4\211\1\0\1\211\1\u012b"+
    "\12\211\1\0\10\211\31\0\4\17\1\0\10\17\1\u012c"+
    "\3\17\1\0\10\17\31\0\4\17\1\0\1\17\1\u012d"+
    "\12\17\1\0\10\17\31\0\4\17\1\0\3\17\1\u012e"+
    "\10\17\1\0\10\17\31\0\4\17\1\0\14\17\1\0"+
    "\2\17\1\u012f\5\17\31\0\4\17\1\0\14\17\1\0"+
    "\1\17\1\u0130\6\17\31\0\4\17\1\0\4\17\1\u0131"+
    "\7\17\1\0\10\17\31\0\4\17\1\0\13\17\1\u0132"+
    "\1\0\10\17\31\0\4\17\1\0\14\17\1\0\5\17"+
    "\1\u0133\2\17\31\0\4\17\1\0\1\17\1\u0134\12\17"+
    "\1\0\10\17\31\0\4\17\1\0\10\17\1\u0135\3\17"+
    "\1\0\10\17\31\0\4\17\1\0\3\17\1\u0136\10\17"+
    "\1\0\10\17\31\0\4\17\1\0\14\17\1\0\1\u0137"+
    "\7\17\31\0\4\17\1\0\3\17\1\u0138\10\17\1\0"+
    "\10\17\31\0\4\17\1\0\14\17\1\0\5\17\1\u0139"+
    "\2\17\31\0\4\17\1\0\4\17\1\u013a\7\17\1\0"+
    "\10\17\31\0\4\17\1\0\11\17\1\u013b\2\17\1\0"+
    "\10\17\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9894];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\1\1\1\11\12\1\1\11"+
    "\3\1\3\11\2\1\3\11\1\1\1\11\4\1\1\11"+
    "\2\1\2\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\2\11\1\1\1\11\4\1\1\11\1\1\3\11"+
    "\6\1\1\11\2\1\2\11\1\1\1\11\4\1\2\11"+
    "\4\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\6\1\2\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\10\1\2\11\1\1\1\11\4\1\1\11\3\1\4\0"+
    "\14\1\10\11\3\1\10\11\2\0\3\1\7\11\2\0"+
    "\3\1\1\11\3\1\7\11\2\0\3\1\7\11\2\1"+
    "\2\0\1\11\21\1\1\11\4\1\1\11\7\1\1\11"+
    "\6\1\1\0\72\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BaseScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BaseScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1756) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { System.out.println("found |"); return symbol(ECESym.MOD);
          }
        case 154: break;
        case 107: 
          { System.out.println("found >="); return symbol(CESym.GREATERTHANEQUAL);
          }
        case 155: break;
        case 69: 
          { return symbol(BaseSym.LESSTHAN);
          }
        case 156: break;
        case 45: 
          { System.out.println("found ;"); return symbol(CESym.SEMI);
          }
        case 157: break;
        case 83: 
          { return symbol(ECESym.GREATERTHAN);
          }
        case 158: break;
        case 20: 
          { System.out.println("found >"); return symbol(BaseSym.GREATERTHAN);
          }
        case 159: break;
        case 142: 
          { System.out.println("found begin "); return symbol(BaseSym.BEGIN);
          }
        case 160: break;
        case 144: 
          { System.out.println("found knows "); return symbol(BaseSym.FALSE);
          }
        case 161: break;
        case 92: 
          { System.out.println("found &&"); return symbol(BaseSym.AND);
          }
        case 162: break;
        case 94: 
          { System.out.println("found !="); return symbol(ECESym.NOTEQUAL);
          }
        case 163: break;
        case 29: 
          { System.out.println("found knows "); return symbol(ECESym.KNOWS, "@");
          }
        case 164: break;
        case 48: 
          { System.out.println("found )"); return symbol(CESym.RPAREN);
          }
        case 165: break;
        case 93: 
          { System.out.println("found distributed knowledge");  return symbol(BaseSym.DISTKNOWLEDGE);
          }
        case 166: break;
        case 21: 
          { System.out.println("found everybody knows");  return symbol(BaseSym.EVERYBODYKNOWS);
          }
        case 167: break;
        case 105: 
          { System.out.println("found ->"); return symbol(CESym.IMPLIES);
          }
        case 168: break;
        case 54: 
          { System.out.println("]"); yybegin(YYINITIAL);
          }
        case 169: break;
        case 65: 
          { return symbol(BaseSym.RPAREN);
          }
        case 170: break;
        case 136: 
          { System.out.println("found 'true' "); return symbol(CESym.TRUE);
          }
        case 171: break;
        case 71: 
          { System.out.println("out of phi state"); yybegin(YYINITIAL); return symbol(BaseSym.RBRACKET);
          }
        case 172: break;
        case 13: 
          { System.out.println("found ("); return symbol(BaseSym.LPAREN);
          }
        case 173: break;
        case 23: 
          { System.out.println("found knows "); return symbol(BaseSym.KNOWS);
          }
        case 174: break;
        case 101: 
          { System.out.println("found distributed knowledge");  return symbol(ECESym.DISTKNOWLEDGE, ":>");
          }
        case 175: break;
        case 26: 
          { System.out.println("found /"); return symbol(ECESym.DIVIDE);
          }
        case 176: break;
        case 118: 
          { return symbol(ECESym.DOUBLEEQUALS);
          }
        case 177: break;
        case 63: 
          { return symbol(BaseSym.NOT);
          }
        case 178: break;
        case 68: 
          { return symbol(BaseSym.MINUS);
          }
        case 179: break;
        case 14: 
          { System.out.println("found )"); return symbol(BaseSym.RPAREN);
          }
        case 180: break;
        case 153: 
          { System.out.println("found constraint"); return symbol(BaseSym.CONSTRAINT_KW);
          }
        case 181: break;
        case 44: 
          { System.out.println("found " + yytext()); return symbol(CESym.DOUBLE, new Double(yytext()));
          }
        case 182: break;
        case 87: 
          { System.out.println("found =="); return symbol(BaseSym.DOUBLEEQUALS);
          }
        case 183: break;
        case 46: 
          { System.out.println("found !"); return symbol(CESym.NOT);
          }
        case 184: break;
        case 31: 
          { System.out.println("found !"); return symbol(ECESym.NOT);
          }
        case 185: break;
        case 76: 
          { return symbol(ECESym.NOT);
          }
        case 186: break;
        case 18: 
          { System.out.println("found -"); return symbol(BaseSym.MINUS);
          }
        case 187: break;
        case 120: 
          { return symbol(ECESym.IMPLIES);
          }
        case 188: break;
        case 85: 
          { System.out.println("found atom identifier" + yytext()); yybegin(YYINITIAL); return symbol(BaseSym.IDENTIFIER, yytext());
          }
        case 189: break;
        case 96: 
          { System.out.println("found ||"); return symbol(ECESym.OR);
          }
        case 190: break;
        case 22: 
          { System.out.println("found atom identifier" + yytext()); yybegin(YYINITIAL); 
                                   return symbol(BaseSym.ATOM_IDENTIFIER, yytext());
          }
        case 191: break;
        case 90: 
          { System.out.println("found <="); return symbol(BaseSym.LESSTHANEQUAL);
          }
        case 192: break;
        case 106: 
          { System.out.println("found <="); return symbol(CESym.LESSTHANEQUAL);
          }
        case 193: break;
        case 115: 
          { return symbol(BaseSym.GREATERTHANEQUAL);
          }
        case 194: break;
        case 114: 
          { return symbol(BaseSym.LESSTHANEQUAL);
          }
        case 195: break;
        case 55: 
          { System.out.println("found atom identifier" + yytext()); return symbol(ECESym.IDENTIFIER, yytext());
          }
        case 196: break;
        case 1: 
          { throw new Error("Illegal character <"+
                                                    yytext()+ " at line " + yyline + " at column " + yycolumn + ">");
          }
        case 197: break;
        case 73: 
          { return symbol(ECESym.MULTIPLY);
          }
        case 198: break;
        case 150: 
          { System.out.println("found dynamic"); return symbol(BaseSym.DYNAMIC_KW);
          }
        case 199: break;
        case 64: 
          { return symbol(BaseSym.LPAREN);
          }
        case 200: break;
        case 151: 
          { System.out.println("found observes "); return symbol(BaseSym.OBSERVES);
          }
        case 201: break;
        case 141: 
          { return symbol(ECESym.SQUAREROOT);
          }
        case 202: break;
        case 133: 
          { System.out.println("found sqrt"); return symbol(BaseSym.SQUAREROOT);
          }
        case 203: break;
        case 139: 
          { return symbol(BaseSym.SQUAREROOT);
          }
        case 204: break;
        case 12: 
          { System.out.println("found ="); return symbol(BaseSym.EQUALS);
          }
        case 205: break;
        case 130: 
          { return symbol(ECESym.SQUARE);
          }
        case 206: break;
        case 57: 
          { System.out.println("found knows "); yybegin(EP_KN_IDENTIFIER); return symbol(ECESym.KNOWS);
          }
        case 207: break;
        case 128: 
          { System.out.println("found sqr"); return symbol(CESym.SQUARE);
          }
        case 208: break;
        case 60: 
          { return symbol(BaseSym.DIVIDE);
          }
        case 209: break;
        case 5: 
          { System.out.println("found identifier " + yytext()); return symbol(BaseSym.IDENTIFIER, yytext());
          }
        case 210: break;
        case 10: 
          { System.out.println("found ;"); return symbol(BaseSym.SEMI);
          }
        case 211: break;
        case 109: 
          { System.out.println("found distributed knowledge"); yybegin(EP_KN_IDENTIFIER); return symbol(ECESym.DISTKNOWLEDGE);
          }
        case 212: break;
        case 2: 
          { /* ignore */
          }
        case 213: break;
        case 138: 
          { return symbol(BaseSym.TRUE);
          }
        case 214: break;
        case 82: 
          { return symbol(ECESym.LESSTHAN);
          }
        case 215: break;
        case 145: 
          { System.out.println("found 'false' "); return symbol(ECESym.FALSE);
          }
        case 216: break;
        case 89: 
          { System.out.println("found ->"); return symbol(BaseSym.IMPLIES);
          }
        case 217: break;
        case 121: 
          { return symbol(ECESym.LESSTHANEQUAL);
          }
        case 218: break;
        case 127: 
          { System.out.println("found sqr"); return symbol(ECESym.SQUARE);
          }
        case 219: break;
        case 30: 
          { System.out.println("found ;"); return symbol(ECESym.SEMI);
          }
        case 220: break;
        case 52: 
          { System.out.println("found <"); return symbol(CESym.LESSTHAN);
          }
        case 221: break;
        case 99: 
          { System.out.println("found >="); return symbol(ECESym.GREATERTHANEQUAL);
          }
        case 222: break;
        case 39: 
          { System.out.println("found everybody knows");  return symbol(ECESym.EVERYBODYKNOWS, "#");
          }
        case 223: break;
        case 126: 
          { System.out.println("found sqr"); return symbol(BaseSym.SQUARE);
          }
        case 224: break;
        case 49: 
          { System.out.println("found |"); return symbol(CESym.MOD);
          }
        case 225: break;
        case 125: 
          { System.out.println("found int ");  yybegin(KN_IDENTIFIER); return symbol(BaseSym.INT);
          }
        case 226: break;
        case 19: 
          { System.out.println("found <"); return symbol(BaseSym.LESSTHAN);
          }
        case 227: break;
        case 135: 
          { System.out.println("found sqrt"); return symbol(ECESym.SQUAREROOT);
          }
        case 228: break;
        case 70: 
          { return symbol(BaseSym.GREATERTHAN);
          }
        case 229: break;
        case 146: 
          { System.out.println("found 'false' "); return symbol(CESym.FALSE);
          }
        case 230: break;
        case 124: 
          { System.out.println("found end "); return symbol(BaseSym.END);
          }
        case 231: break;
        case 132: 
          { System.out.println("found knows "); return symbol(BaseSym.TRUE);
          }
        case 232: break;
        case 80: 
          { return symbol(ECESym.PLUS);
          }
        case 233: break;
        case 147: 
          { return symbol(BaseSym.FALSE);
          }
        case 234: break;
        case 66: 
          { return symbol(BaseSym.MOD);
          }
        case 235: break;
        case 37: 
          { System.out.println("found <"); return symbol(ECESym.LESSTHAN);
          }
        case 236: break;
        case 38: 
          { System.out.println("found >"); return symbol(ECESym.GREATERTHAN);
          }
        case 237: break;
        case 42: 
          { System.out.println("found *"); return symbol(CESym.MULTIPLY);
          }
        case 238: break;
        case 88: 
          { System.out.println("found ||"); return symbol(BaseSym.OR);
          }
        case 239: break;
        case 58: 
          { System.out.println("found everybody knows"); yybegin(EP_KN_IDENTIFIER); return symbol(ECESym.EVERYBODYKNOWS);
          }
        case 240: break;
        case 75: 
          { return symbol(ECESym.DOUBLE, new Double(yytext()));
          }
        case 241: break;
        case 81: 
          { return symbol(ECESym.MINUS);
          }
        case 242: break;
        case 35: 
          { System.out.println("found +"); return symbol(ECESym.PLUS);
          }
        case 243: break;
        case 36: 
          { System.out.println("found -"); return symbol(ECESym.MINUS);
          }
        case 244: break;
        case 8: 
          { System.out.println("[ "); yybegin(CONSTRAINT);
          }
        case 245: break;
        case 59: 
          { System.out.println("}"); yybegin(YYINITIAL);
          }
        case 246: break;
        case 79: 
          { return symbol(ECESym.MOD);
          }
        case 247: break;
        case 131: 
          { System.out.println("found enum ");  yybegin(KN_IDENTIFIER); return symbol(BaseSym.ENUM);
          }
        case 248: break;
        case 25: 
          { System.out.println("found agent identifier" + yytext()); yybegin(YYINITIAL); 
                                   return symbol(BaseSym.AGENT_IDENTIFIER, yytext());
          }
        case 249: break;
        case 91: 
          { System.out.println("found >="); return symbol(BaseSym.GREATERTHANEQUAL);
          }
        case 250: break;
        case 84: 
          { System.out.println("out of phi state"); yybegin(EPISTEMIC_CONSTRAINT); return symbol(ECESym.BRACKET);
          }
        case 251: break;
        case 4: 
          { System.out.println("found *"); return symbol(BaseSym.MULTIPLY);
          }
        case 252: break;
        case 27: 
          { System.out.println("found *"); return symbol(ECESym.MULTIPLY);
          }
        case 253: break;
        case 149: 
          { System.out.println("found boolean "); yybegin(KN_IDENTIFIER); return symbol(BaseSym.BOOLEAN);
          }
        case 254: break;
        case 97: 
          { System.out.println("found ->"); return symbol(ECESym.IMPLIES);
          }
        case 255: break;
        case 113: 
          { return symbol(BaseSym.IMPLIES);
          }
        case 256: break;
        case 100: 
          { System.out.println("found &&"); return symbol(ECESym.AND);
          }
        case 257: break;
        case 51: 
          { System.out.println("found -"); return symbol(CESym.MINUS);
          }
        case 258: break;
        case 56: 
          { System.out.println("found " + yytext()); return symbol(ECESym.DOUBLE, new Double(yytext()));
          }
        case 259: break;
        case 15: 
          { System.out.println("found ,"); return symbol(BaseSym.COMMA);
          }
        case 260: break;
        case 11: 
          { System.out.println("found ~"); return symbol(BaseSym.NOT);
          }
        case 261: break;
        case 110: 
          { return symbol(BaseSym.NOTEQUAL);
          }
        case 262: break;
        case 134: 
          { System.out.println("found 'true' "); return symbol(ECESym.TRUE);
          }
        case 263: break;
        case 53: 
          { System.out.println("found >"); return symbol(CESym.GREATERTHAN);
          }
        case 264: break;
        case 28: 
          { System.out.println("found atom identifier" + yytext()); yybegin(EPISTEMIC_CONSTRAINT); 
                                   return symbol(ECESym.IDENTIFIER, yytext());
          }
        case 265: break;
        case 116: 
          { return symbol(BaseSym.AND);
          }
        case 266: break;
        case 129: 
          { return symbol(BaseSym.SQUARE);
          }
        case 267: break;
        case 78: 
          { return symbol(ECESym.RPAREN);
          }
        case 268: break;
        case 17: 
          { System.out.println("found +"); return symbol(BaseSym.PLUS);
          }
        case 269: break;
        case 62: 
          { return symbol(BaseSym.IDENTIFIER, yytext());
          }
        case 270: break;
        case 137: 
          { System.out.println("found sqrt"); return symbol(CESym.SQUAREROOT);
          }
        case 271: break;
        case 111: 
          { return symbol(BaseSym.DOUBLEEQUALS);
          }
        case 272: break;
        case 102: 
          { System.out.println("found !="); return symbol(CESym.NOTEQUAL);
          }
        case 273: break;
        case 123: 
          { return symbol(ECESym.AND);
          }
        case 274: break;
        case 108: 
          { System.out.println("found &&"); return symbol(CESym.AND);
          }
        case 275: break;
        case 119: 
          { return symbol(ECESym.OR);
          }
        case 276: break;
        case 95: 
          { System.out.println("found =="); return symbol(ECESym.DOUBLEEQUALS);
          }
        case 277: break;
        case 152: 
          { System.out.println("found constraint"); return symbol(BaseSym.EPISTEMIC_KW);
          }
        case 278: break;
        case 50: 
          { System.out.println("found +"); return symbol(CESym.PLUS);
          }
        case 279: break;
        case 122: 
          { return symbol(ECESym.GREATERTHANEQUAL);
          }
        case 280: break;
        case 103: 
          { System.out.println("found =="); return symbol(CESym.DOUBLEEQUALS);
          }
        case 281: break;
        case 7: 
          { System.out.println("found knows ");  yybegin(KNOWS_STATE); return symbol(BaseSym.KNOWS);
          }
        case 282: break;
        case 47: 
          { System.out.println("found ("); return symbol(CESym.LPAREN);
          }
        case 283: break;
        case 6: 
          { return symbol(BaseSym.DOUBLE, new Double(yytext()));
          }
        case 284: break;
        case 86: 
          { System.out.println("found !="); return symbol(BaseSym.NOTEQUAL);
          }
        case 285: break;
        case 41: 
          { System.out.println("found /"); return symbol(CESym.DIVIDE);
          }
        case 286: break;
        case 98: 
          { System.out.println("found <="); return symbol(ECESym.LESSTHANEQUAL);
          }
        case 287: break;
        case 24: 
          { System.out.println("[ in KN_IDENTIFIER"); yybegin(PHISTATE); return symbol(BaseSym.LBRACKET);
          }
        case 288: break;
        case 61: 
          { return symbol(BaseSym.MULTIPLY);
          }
        case 289: break;
        case 67: 
          { return symbol(BaseSym.PLUS);
          }
        case 290: break;
        case 33: 
          { System.out.println("found )"); return symbol(ECESym.RPAREN);
          }
        case 291: break;
        case 32: 
          { System.out.println("found ("); return symbol(ECESym.LPAREN);
          }
        case 292: break;
        case 112: 
          { return symbol(BaseSym.OR);
          }
        case 293: break;
        case 143: 
          { System.out.println("found agent ");  yybegin(AG_IDENTIFIER); return symbol(BaseSym.AGENT);
          }
        case 294: break;
        case 104: 
          { System.out.println("found ||"); return symbol(CESym.OR);
          }
        case 295: break;
        case 140: 
          { return symbol(ECESym.TRUE);
          }
        case 296: break;
        case 3: 
          { System.out.println("found /"); return symbol(BaseSym.DIVIDE);
          }
        case 297: break;
        case 77: 
          { return symbol(ECESym.LPAREN);
          }
        case 298: break;
        case 9: 
          { System.out.println("{ "); yybegin(EPISTEMIC_CONSTRAINT);
          }
        case 299: break;
        case 148: 
          { return symbol(ECESym.FALSE);
          }
        case 300: break;
        case 40: 
          { System.out.println("% "); yybegin(PHISTATE_KN_CONSTRAINT); return symbol(ECESym.BRACKET);
          }
        case 301: break;
        case 117: 
          { return symbol(ECESym.NOTEQUAL);
          }
        case 302: break;
        case 74: 
          { return symbol(ECESym.IDENTIFIER, yytext());
          }
        case 303: break;
        case 43: 
          { System.out.println("found identifier" + yytext()); return symbol(CESym.IDENTIFIER, yytext());
          }
        case 304: break;
        case 72: 
          { return symbol(ECESym.DIVIDE);
          }
        case 305: break;
        case 16: 
          { System.out.println("found /"); return symbol(BaseSym.MOD);
          }
        case 306: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(BaseSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

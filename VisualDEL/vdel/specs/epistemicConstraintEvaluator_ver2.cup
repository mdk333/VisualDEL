import java.util.HashSet;

action code {:
    SpeakNowFunctions sFunctions = new SpeakNowFunctions();
 :}


//terminal DOUBLEEQUALS, LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, TRUE, FALSE;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, SQUAREROOT, SQUARE, LPAREN, RPAREN, BRACKET, SEMI;
terminal DOUBLEEQUALS, LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, NOTEQUAL, AND, OR, IMPLIES, NOT, MOD;
terminal KNOWS, DISTKNOWLEDGE, EVERYBODYKNOWS;
terminal String IDENTIFIER, ATOM_IDENTIFIER;
terminal Integer INTEGER;
terminal Double  DOUBLE;
terminal Boolean TRUE, FALSE;

/* Non-terminals */
non terminal Object statement;
non terminal String boolean_expr, arithmetic_expr, term, unary_expr, phi, leaf; 
non terminal Double dynamic_expr; 
non terminal Object[] epistemic_expr;



/* Precedences */
precedence nonassoc LPAREN, RPAREN;
precedence right NOT;

precedence right KNOWS, DISTKNOWLEDGE, EVERYBODYKNOWS;
precedence right SQUARE;
precedence right SQUAREROOT;

precedence left MULTIPLY, DIVIDE, MOD;
precedence left PLUS, MINUS;

precedence left DOUBLEEQUALS, LESSTHAN, LESSTHANEQUAL, GREATERTHAN, GREATERTHANEQUAL, NOTEQUAL;

precedence left AND, OR;
precedence left IMPLIES;


statement ::= epistemic_expr:ee
		   {:
		   	// here update the graph object (the qualifiedStateMap) by removing those states that do not belong to the final "truth" set from it
		   	Utilities.updateGraph(ee);
		   	System.out.println("Updating Graph++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
		   :} SEMI
		   | boolean_expr:be 
		   {: 
		   	 Object[] obj = Utilities.solveGlobalBooleanExpression(be);
		   	 Utilities.updateGraph(obj);
		   :} SEMI   
		   | boolean_expr:be AND epistemic_expr:ee
		   {:
		   	Object[] obj = Utilities.solveGlobalBooleanExpression(be);
		   	ee = Utilities.epistemicExpressionAND(obj, ee);
		   	Utilities.updateGraph(ee);
		   	
		   :} SEMI
		   | boolean_expr:be OR epistemic_expr:ee
		   {:
		   	Object[] obj = Utilities.solveGlobalBooleanExpression(be);
		   	ee = Utilities.epistemicExpressionOR(obj, ee);
		   	Utilities.updateGraph(ee);
		   :} SEMI
		   | boolean_expr:be IMPLIES epistemic_expr:ee
		   {:
		   	Object[] obj = Utilities.solveGlobalBooleanExpression(be);
		   	ee = Utilities.epistemicExpressionIMPLIES(obj, ee);
		   	Utilities.updateGraph(ee);
		   :} SEMI;
		    
		   
//static_constraint ::=  CONSTRAINTKW boolean_expr SEMI;   // e.g x < y;
//dynamic_constraint ::= CONSTRAINTKW INTEGER:id EQUALS expr:e {: RESULT = new Double(e.doubleValue()); :}  SEMI  //e.g sum = x + y;
//				|  CONSTRAINTKW INTEGER:id EQUALS boolean_expr:e {: RESULT = e.booleanValue(); :}  SEMI;   // sum = x < y;

epistemic_expr ::= IDENTIFIER:id KNOWS epistemic_expr:epe  
			  {: 
			  	// access the set S of all states where lower epistemic expressions are true
			  	// for each of all states w, select those states in which the given agent has all its accessibilities (without excetption) in the set S 
			  	//i.e. if all w's successor states (following the accessibility of the agent in question) are a subset of S...then select w
			  	RESULT = Utilities.knowsEpistemicExpression(id, epe);
			  :}
			  | IDENTIFIER:id NOT KNOWS epistemic_expr:epe  
			  {: 
			  	// ...if there is an exception as to whether it has its acccessibility in the set S, select the state 
			  	//Object[] obj = Utilities.knowsEpistemicExpression(id, epe);
		  	  	//Object temp = obj[0];
		  	  	//obj[0] = obj[1];
		  	  	//obj[1] = temp;
		  	  	RESULT = Utilities.epistemicExpressionNOTKNOWSEPIEXPR(id, epe);
			  
			  :}
			  | epistemic_expr:ep AND epistemic_expr:epe 
			  {: 
			  	//((HashSet)ep[0]).retainAll((HashSet)epe[0]);
		   	  	//HashSet temp2 = new HashSet((HashSet)(Utilities.qualifiedStateMap.keySet()));
		  	  	//temp2.removeAll((HashSet)ep[0]);
		  	  	//ep[1] = temp2;
		  	  	RESULT = Utilities.epistemicExpressionAND(ep, epe);
			  :}
		   	  | epistemic_expr:ep OR epistemic_expr:epe 
		   	  {: 
		   	  	//((HashSet)ep[0]).addAll((HashSet)epe[0]);
		   	  	//HashSet temp2 = new HashSet(Utilities.qualifiedStateMap.keySet());
		  	  	//temp2.removeAll((HashSet)ep[0]);
		  	  	//ep[1] = temp2;
		  	  	RESULT = Utilities.epistemicExpressionOR(ep, epe);
		   	  :}
		   	  | epistemic_expr:ep IMPLIES epistemic_expr:epe 
		   	  {: 
		   	  	//not(ep) OR epe will translate to complement(ep) UNION epe
		   	  	//to obtain the complement of ep, we swap ep[0] and ep[1]
		   	  	//Object[] obj = knowsFunction(id, be);
		  	  	//Object temp = ep[0];
		  	  	//ep[0] = ep[1];
		  	  	//ep[1] = temp;
		  	  	
		  	  	//implies
		  	  //	((HashSet)ep[0]).addAll((HashSet)epe[0]);
		  	  	//the complement set
		  	  //	HashSet temp2 = new HashSet(Utilities.qualifiedStateMap.keySet());
		  	  //	temp2.removeAll((HashSet)ep[0]);
		  	  //	ep[1] = temp2;
		  	  	RESULT = Utilities.epistemicExpressionIMPLIES(ep, epe);
		   	  
		   	  :}
		   	  | LPAREN epistemic_expr:ep RPAREN {: RESULT = ep; :}
		  	  | IDENTIFIER:id KNOWS boolean_expr:be 
		  	  {: 
		  	  
		  	  	RESULT = Utilities.knowsBooleanExpression(id, be);
		       // use the id (which is agent identifier) to get the accessibility relations of this agent on each of all the states
		  	  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
		  	  			
		  	  			//select a state s
		  	  	  			//get all the successor states v following this agent's accessibility
		  	  				//test the boolean expression on these states
		  	  					//i.e. substitute the state variables values in the expression, for each state tested
		  	  					//use the AND operator to concatenate expressions for all successor states v
		  	  					// execute the resulting expression and return the value
		  	  					// if returned value is true, save the originating state s  (vice versa for NOT KNOWS)
		  	  					// else discard it
		  	  					
		  	 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
		  	  	
		  	  	// test the boolean expression on all the states to which this agent is accessible from a given state s. If all the 
		  	  	// accessible states satisfies the boolean expression, then s satisfies the knowledge expression
		  	  	
		  	  	// keep record of all states s where the above holds 
		  	  
		  	  :} 
		  	  | IDENTIFIER:id NOT KNOWS boolean_expr:be 
		  	  {:  
		  	  	// complement of Knows; 
		  	  	// since the set of states where "not knows" is already contatined in obj[1], we swap it around with the set of "knows" states (obj[0])
		  	  	//Add things to make it look like what the scanner would see as a boolean expression
		  	  	//be = "[".concat(be).concat(";]");
		  	  	//Object[] obj = Utilities.knowsBooleanExpression(id, be);
		  	  	//Object temp = obj[0];
		  	  	//obj[0] = obj[1];
		  	  	//obj[1] = temp;
		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTKNOWSBE(id, be);
		  	  	//...if there is an exception about a state that does not satisfy the property, we return that state
		  	  :}
		  	  | IDENTIFIER:ag KNOWS BRACKET phi:p BRACKET
		  	  {: 
		  	  	RESULT = Utilities.knowsPHIExpression(ag, p);
		  	  :} 
		  	  | IDENTIFIER:ag NOT KNOWS BRACKET phi:p BRACKET
		  	  {: 
		  	  	//Object[] obj = Utilities.knowsPHIExpression(ag, p);
		  	  	//Object temp = obj[0];
		  	  	//obj[0] = obj[1];
		  	  	//obj[1] = temp;
		  	  	RESULT = Utilities.epistemicExpressionNOTKNOWSPHI(ag, p);
		  	  :}
		  	  | EVERYBODYKNOWS epistemic_expr:epe  
			  {: 
			  	
			  	RESULT = Utilities.everyBodyKnowsEpistemicExpression(epe);
			  :}
			  | NOT EVERYBODYKNOWS epistemic_expr:epe  
			  {: 
			  	
		  	  	RESULT = Utilities.epistemicExpressionNOTEveryBodyKnowsEPIEXPR(epe);
			  
			  :}
		  	  | EVERYBODYKNOWS boolean_expr:be 
		  	  {: 
		  	  
		  	  	RESULT = Utilities.everyBodyKnowsBooleanExpression(be);
		       
		  	  
		  	  :} 
		  	  | NOT EVERYBODYKNOWS boolean_expr:be 
		  	  {:  
		  	  		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTEveryBodyKNOWSBE(be);
		  	  	
		  	  :}
		  	  | EVERYBODYKNOWS BRACKET phi:p BRACKET
		  	  {: 
		  	  	RESULT = Utilities.everyBodyKnowsPHIExpression(p);
		  	  :} 
		  	  | NOT EVERYBODYKNOWS BRACKET phi:p BRACKET
		  	  {: 
		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTEveryBodyKNOWSPHI(p);
		  	  :}
		  	   | DISTKNOWLEDGE epistemic_expr:epe  
			  {: 
			  	
			  	RESULT = Utilities.distKnowsEpistemicExpression(epe);
			  :}
			  | NOT DISTKNOWLEDGE epistemic_expr:epe  
			  {: 
			  	
		  	  	RESULT = Utilities.epistemicExpressionNOTDistKnowsEPIEXPR(epe);
			  
			  :}
		  	  | DISTKNOWLEDGE boolean_expr:be 
		  	  {: 
		  	  
		  	  	RESULT = Utilities.distKnowsBooleanExpression(be);
		       
		  	  
		  	  :} 
		  	  | NOT DISTKNOWLEDGE boolean_expr:be 
		  	  {:  
		  	  		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTDistKNOWSBE(be);
		  	  	
		  	  :}
		  	  | DISTKNOWLEDGE BRACKET phi:p BRACKET
		  	  {: 
		  	  	RESULT = Utilities.distKnowsPHIExpression(p);
		  	  :} 
		  	  | NOT DISTKNOWLEDGE BRACKET phi:p BRACKET
		  	  {: 
		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTDistKNOWSPHI(p);
		  	  :};

phi ::= phi:p1 AND phi:p2 {: RESULT = p1.concat("&&").concat(p2); :}
	 | phi:p1 OR phi:p2 {: RESULT = p1.concat("||").concat(p2); :}
	 | phi:p1 IMPLIES phi:p2 {: RESULT = p1.concat("->").concat(p2); :}
	 | NOT phi:p {: RESULT = "!".concat(p); :}
	 | IDENTIFIER:id {: RESULT = id; :}
	 | LPAREN phi:p RPAREN {: RESULT = "(".concat(p).concat(")"); :};
		  	    

boolean_expr ::=  boolean_expr:be AND boolean_expr:t  {: RESULT = be.concat("&&").concat(t); :}
			| boolean_expr:be OR boolean_expr:t {: RESULT = be.concat("||").concat(t); :}
			| boolean_expr:be IMPLIES boolean_expr:t  {: RESULT = be.concat("->").concat(t); :}		
			| arithmetic_expr:e DOUBLEEQUALS arithmetic_expr:t  {: RESULT = e.concat("==").concat(t); :}
			| arithmetic_expr:e DOUBLEEQUALS boolean_expr:t  {: RESULT = e.concat("==").concat(t); :}
			| arithmetic_expr:e LESSTHAN  arithmetic_expr:t  {: RESULT = e.concat("<").concat(t); :} 
			| arithmetic_expr:e LESSTHANEQUAL arithmetic_expr:t  {: RESULT = e.concat("<=").concat(t); :} 
			| arithmetic_expr:e GREATERTHAN  arithmetic_expr:t  {: RESULT = e.concat(">").concat(t); :}
			| arithmetic_expr:e GREATERTHANEQUAL arithmetic_expr:t  {: RESULT = e.concat(">=").concat(t); :}
			| arithmetic_expr:e NOTEQUAL arithmetic_expr:t  {: RESULT = e.concat("!=").concat(t); :}
			| arithmetic_expr:e NOTEQUAL boolean_expr:t  {: RESULT = e.concat("!=").concat(t); :}	
			| NOT boolean_expr:be {: RESULT = "!".concat(be); :}
			| TRUE {: RESULT = "true"; :}
			| FALSE {: RESULT = "false"; :}
			| LPAREN boolean_expr:be RPAREN  {: RESULT = "(".concat(be).concat(")"); :};
			
			
arithmetic_expr ::= arithmetic_expr:e PLUS term:t {: RESULT = e.concat("+").concat(t); :} 
	  | arithmetic_expr:e MINUS term:t {: RESULT = e.concat("-").concat(t); :}
	  | term:t {: RESULT = t; :}; 


term ::= term:t MULTIPLY unary_expr:ue {: RESULT = t.concat("*").concat(ue); :}
	  |term:t DIVIDE unary_expr:ue {: RESULT = t.concat("/").concat(ue); :}	// this is one reason for making all these double
	  |term:t MOD unary_expr:ue {: RESULT = t.concat("|").concat(ue); :}
	  |unary_expr:ue {: RESULT = ue; :};

//unary_expr ::= UNARYMINUS unary_second_expr:us
//            {:RESULT = new Double(0 - us.doubleValue());:}
//            |unary_second_expr:us
//            {:RESULT = us;:};

unary_expr ::= SQUAREROOT unary_expr:ue {: RESULT = "sqrt".concat(ue); :}
           | SQUARE unary_expr:ue  {: RESULT = "sqr".concat(ue); :}
           | leaf:l  {: RESULT = l; :};

leaf ::= IDENTIFIER:id    // HERE'S THE MAIN DIFFERENCE BECAUSE WE ARE DEALING WITH VARIABLES   
        {: 
        RESULT = id;
        Utilities.inConstraintIdentifiers.add(id); 
        :}
        | DOUBLE:id    // HERE'S THE MAIN DIFFERENCE BECAUSE WE ARE DEALING WITH VARIABLES   
        {: 
        RESULT = id.toString(); 
        :}
	   | LPAREN arithmetic_expr:be RPAREN  {: RESULT = "(".concat(be).concat(")"); :};
	   

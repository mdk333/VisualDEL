//
// @author Maduka Attamah
//
// Copyright 2011-2012 Maduka Attamah
//

package vdel;

import java.awt.Dimension;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;
import vdel.utilities.ImageViewer;
import vdel.utilities.Utilities;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author knight
 */
public class EpistemicKeypad extends javax.swing.JFrame {

    public static StringBuilder sbDisplayText = new StringBuilder();
    //public static String operatorHold;
    // public static ArrayList<Integer> backSpaceBuffer = new ArrayList<Integer>();
    public static ArrayList<String> propertyHistory = new ArrayList<String>();
    public static Integer historyCounter = 0;

    /**
     * Creates new form EpistemicKeypad
     */
    public EpistemicKeypad() {
        initComponents();
        // statesPopup.setPreferredSize(new Dimension(statesButton.getWidth(), statesButton.getWidth()));
        agentsPopup.setPreferredSize(new Dimension(agentsButton.getWidth(), agentsButton.getWidth()));
        atomsPopup.setPreferredSize(new Dimension(atomsButton.getWidth(), atomsButton.getWidth()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        agentsPopup = new javax.swing.JPopupMenu();
        Iterator itAgents = Utilities.agentVarMap.entrySet().iterator();

        while(itAgents.hasNext()){
            //AGENT SELECTION
            final Map.Entry agent = (Map.Entry) itAgents.next();
            javax.swing.JMenu menu = new javax.swing.JMenu(agent.getKey().toString());
            // the agent's epistemic powers flyout menu
            javax.swing.JMenuItem menuItem1 = new javax.swing.JMenuItem("Knows");
            javax.swing.JMenuItem menuItem2 = new javax.swing.JMenuItem("\u00acKnows");

            menuItem1.addActionListener(new java.awt.event.ActionListener() {
                //action listener for "agent knows..."
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    //append this to the display
                    EpistemicKeypad.sbDisplayText.append(agent.getKey().toString()).append("@");
                    //you could also add this chunk to an arraylist so as to facilitate backspace
                    displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
                    // EpistemicKeypad.backSpaceBuffer.add(agent.getKey().toString().concat("@").length());

                }
            });

            menuItem2.addActionListener(new java.awt.event.ActionListener() {
                //action listener for "agent knows..."
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    //append this to the display
                    EpistemicKeypad.sbDisplayText.append(agent.getKey().toString()).append("!@");
                    //you could also add this chunk to an arraylist so as to facilitate backspace
                    displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
                    //   EpistemicKeypad.backSpaceBuffer.add(agent.getKey().toString().concat("!@").length());

                }
            });

            menu.add(menuItem1);
            menu.add(menuItem2);
            //now add this value to the popup
            agentsPopup.add(menu);
        }
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        atomsPopup = new javax.swing.JPopupMenu();
        Iterator itSymbols = Utilities.symbolTable.entrySet().iterator();

        while (itSymbols.hasNext()) {
            final Map.Entry variable = (Map.Entry) itSymbols.next();
            javax.swing.JMenu menu = new javax.swing.JMenu(variable.getKey().toString());
            // the variables flyout menu
            // the first one is for phi, i.e. the variable itselt. The others are for boolean operators
            javax.swing.JMenuItem menuItem0 = new javax.swing.JMenuItem(variable.getKey().toString());
            javax.swing.JMenuItem menuItem1 = new javax.swing.JMenuItem("[".concat(variable.getKey().toString()).concat("]"));

            menuItem0.addActionListener(new java.awt.event.ActionListener() {
                //action listener for "agent knows..."
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    //append this to the display
                    EpistemicKeypad.sbDisplayText.append(variable.getKey().toString());
                    //you could also add this chunk to an arraylist so as to facilitate backspace
                    displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
                    //EpistemicKeypad.backSpaceBuffer.add(variable.getKey().toString().length());

                }
            });

            menuItem1.addActionListener(new java.awt.event.ActionListener() {
                //action listener for "agent knows..."
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    //append this to the display
                    EpistemicKeypad.sbDisplayText.append("[").append(variable.getKey().toString()).append("]");
                    //you could also add this chunk to an arraylist so as to facilitate backspace
                    displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
                    //EpistemicKeypad.backSpaceBuffer.add("[".concat(variable.getKey().toString()).concat("]").length());

                }
            });

            menu.add(menuItem0);
            menu.add(menuItem1);

            //now add this value to the popup
            atomsPopup.add(menu);
        }
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTextField = new javax.swing.JTextArea();
        upHistoryButton = new javax.swing.JButton();
        downHistoryButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        buttonCounterModel = new javax.swing.JButton();
        buttonSyntaxTree = new javax.swing.JButton();
        buttonGenerateModel = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        buttonPlus = new javax.swing.JButton();
        buttonMinus = new javax.swing.JButton();
        buttonDivide = new javax.swing.JButton();
        buttonMultiply = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        buttonOne = new javax.swing.JButton();
        buttonTwo = new javax.swing.JButton();
        buttonThree = new javax.swing.JButton();
        buttonFour = new javax.swing.JButton();
        buttonFive = new javax.swing.JButton();
        buttonSix = new javax.swing.JButton();
        buttonSeven = new javax.swing.JButton();
        buttonEight = new javax.swing.JButton();
        buttonNine = new javax.swing.JButton();
        buttonZero = new javax.swing.JButton();
        buttonDecimalPoint = new javax.swing.JButton();
        buttonAt = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        buttonOr = new javax.swing.JButton();
        buttonLParen = new javax.swing.JButton();
        buttonImplies = new javax.swing.JButton();
        buttonRParen = new javax.swing.JButton();
        buttonAnd = new javax.swing.JButton();
        buttonNot = new javax.swing.JButton();
        buttonEquals = new javax.swing.JButton();
        buttonLessThan = new javax.swing.JButton();
        buttonGreaterThan = new javax.swing.JButton();
        buttonNotEquals = new javax.swing.JButton();
        buttonGreaterThanEquals = new javax.swing.JButton();
        buttonLessThanEquals = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        atomsButton = new javax.swing.JButton();
        agentsButton = new javax.swing.JButton();
        stateList = new javax.swing.JComboBox();
        //add the first list item (*) which denotes "every state"
        stateList.addItem(new String("*: "));
        StringBuilder sb = new StringBuilder();
        Integer stateId;
        Iterator itStates = Utilities.qualifiedStateMap.keySet().iterator();
        while (itStates.hasNext()) {
            stateId = (Integer) itStates.next();

            sb.append(stateId.toString()).append(": ");

            String[] label =  Utilities.stateLabelMap.get(stateId);
            //now label the nodes with their values
            for (int i = 0; i < label.length; i++) {
                sb.append(label[i]).append(", ");

            }
            sb.delete(sb.length() - 2, sb.length() - 1);  //remove the last comma and space

            stateList.addItem(new String(sb.toString()));
            // clear the string buffer sb in readiness for the next round
            sb.delete(0, sb.length());
        }
        jPanel7 = new javax.swing.JPanel();
        buttonModulus = new javax.swing.JButton();
        buttonSquare = new javax.swing.JButton();
        buttonSquareRoot = new javax.swing.JButton();
        buttonCheck = new javax.swing.JButton();
        buttonC = new javax.swing.JButton();
        buttonD = new javax.swing.JButton();
        buttonE = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonBackSpace = new javax.swing.JButton();
        buttonTrue = new javax.swing.JButton();
        buttonFalse = new javax.swing.JButton();
        statusBarLabel = new javax.swing.JLabel();

        agentsPopup.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        agentsPopup.setAutoscrolls(true);
        agentsPopup.setPreferredSize(new java.awt.Dimension(350, 54));
        agentsPopup.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                agentsPopupPropertyChange(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        atomsPopup.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        atomsPopup.setAutoscrolls(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Epistemic Keypad");

        displayTextField.setEditable(false);
        displayTextField.setColumns(20);
        displayTextField.setRows(5);
        jScrollPane1.setViewportView(displayTextField);

        upHistoryButton.setFont(new java.awt.Font("Cantarell", 0, 10)); // NOI18N
        upHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vdel/images/uparrow.png"))); // NOI18N
        upHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upHistoryButtonActionPerformed(evt);
            }
        });

        downHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vdel/images/downarrow.png"))); // NOI18N
        downHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downHistoryButtonActionPerformed(evt);
            }
        });

        editButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vdel/images/edit.png"))); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        buttonCounterModel.setBackground(new java.awt.Color(255, 148, 0));
        buttonCounterModel.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonCounterModel.setText("CM");
        buttonCounterModel.setEnabled(false);
        buttonCounterModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCounterModelActionPerformed(evt);
            }
        });

        buttonSyntaxTree.setBackground(new java.awt.Color(255, 148, 0));
        buttonSyntaxTree.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonSyntaxTree.setText("ST");
        buttonSyntaxTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSyntaxTreeActionPerformed(evt);
            }
        });

        buttonGenerateModel.setBackground(new java.awt.Color(0, 225, 255));
        buttonGenerateModel.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonGenerateModel.setText("GM");
        buttonGenerateModel.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonGenerateModel.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonGenerateModel.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonGenerateModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateModelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonGenerateModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonCounterModel, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(buttonSyntaxTree, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(upHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(downHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonCounterModel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(buttonGenerateModel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSyntaxTree, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(upHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8)
                            .addComponent(downHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonPlus.setBackground(new java.awt.Color(68, 154, 188));
        buttonPlus.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonPlus.setText("+");
        buttonPlus.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlusActionPerformed(evt);
            }
        });

        buttonMinus.setBackground(new java.awt.Color(68, 154, 188));
        buttonMinus.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonMinus.setText("-");
        buttonMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMinusActionPerformed(evt);
            }
        });

        buttonDivide.setBackground(new java.awt.Color(68, 154, 188));
        buttonDivide.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonDivide.setText("/");
        buttonDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDivideActionPerformed(evt);
            }
        });

        buttonMultiply.setBackground(new java.awt.Color(68, 154, 188));
        buttonMultiply.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonMultiply.setText("*");
        buttonMultiply.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMultiplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonDivide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonMultiply, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
            .addComponent(buttonPlus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonMinus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(buttonPlus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, -1, 150));

        buttonOne.setBackground(new java.awt.Color(255, 148, 0));
        buttonOne.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonOne.setText("1");
        buttonOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOneActionPerformed(evt);
            }
        });

        buttonTwo.setBackground(new java.awt.Color(255, 148, 0));
        buttonTwo.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonTwo.setText("2");
        buttonTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTwoActionPerformed(evt);
            }
        });

        buttonThree.setBackground(new java.awt.Color(255, 148, 0));
        buttonThree.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonThree.setText("3");
        buttonThree.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonThreeActionPerformed(evt);
            }
        });

        buttonFour.setBackground(new java.awt.Color(255, 148, 0));
        buttonFour.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonFour.setText("4");
        buttonFour.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFourActionPerformed(evt);
            }
        });

        buttonFive.setBackground(new java.awt.Color(255, 148, 0));
        buttonFive.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonFive.setText("5");
        buttonFive.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFiveActionPerformed(evt);
            }
        });

        buttonSix.setBackground(new java.awt.Color(255, 148, 0));
        buttonSix.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonSix.setText("6");
        buttonSix.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonSix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSixActionPerformed(evt);
            }
        });

        buttonSeven.setBackground(new java.awt.Color(255, 148, 0));
        buttonSeven.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonSeven.setText("7");
        buttonSeven.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonSeven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSevenActionPerformed(evt);
            }
        });

        buttonEight.setBackground(new java.awt.Color(255, 148, 0));
        buttonEight.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonEight.setText("8");
        buttonEight.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonEight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEightActionPerformed(evt);
            }
        });

        buttonNine.setBackground(new java.awt.Color(255, 148, 0));
        buttonNine.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonNine.setText("9");
        buttonNine.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonNine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNineActionPerformed(evt);
            }
        });

        buttonZero.setBackground(new java.awt.Color(255, 148, 0));
        buttonZero.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonZero.setText("0");
        buttonZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZeroActionPerformed(evt);
            }
        });

        buttonDecimalPoint.setBackground(new java.awt.Color(154, 231, 106));
        buttonDecimalPoint.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonDecimalPoint.setText(".");
        buttonDecimalPoint.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonDecimalPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecimalPointActionPerformed(evt);
            }
        });

        buttonAt.setBackground(new java.awt.Color(154, 231, 106));
        buttonAt.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonAt.setText("@");
        buttonAt.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonAt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(buttonOne, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonThree, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(buttonFour, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonFive, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonSix, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(buttonSeven, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonEight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonNine, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(buttonDecimalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(buttonZero, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonAt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonOne, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonThree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonFour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonFive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSeven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonDecimalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonZero, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );

        jPanel6.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 150, -1));

        buttonOr.setBackground(new java.awt.Color(255, 148, 0));
        buttonOr.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonOr.setText("||");
        buttonOr.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOrActionPerformed(evt);
            }
        });

        buttonLParen.setBackground(new java.awt.Color(154, 231, 106));
        buttonLParen.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonLParen.setText("(");
        buttonLParen.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonLParen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLParenActionPerformed(evt);
            }
        });

        buttonImplies.setBackground(new java.awt.Color(255, 148, 0));
        buttonImplies.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonImplies.setText("->");
        buttonImplies.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonImplies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImpliesActionPerformed(evt);
            }
        });

        buttonRParen.setBackground(new java.awt.Color(154, 231, 106));
        buttonRParen.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonRParen.setText(")");
        buttonRParen.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonRParen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRParenActionPerformed(evt);
            }
        });

        buttonAnd.setBackground(new java.awt.Color(255, 148, 0));
        buttonAnd.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonAnd.setText("&&");
        buttonAnd.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonAnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAndActionPerformed(evt);
            }
        });

        buttonNot.setBackground(new java.awt.Color(255, 148, 0));
        buttonNot.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonNot.setText("!");
        buttonNot.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonNot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNotActionPerformed(evt);
            }
        });

        buttonEquals.setBackground(new java.awt.Color(0, 251, 157));
        buttonEquals.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonEquals.setText("==");
        buttonEquals.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEqualsActionPerformed(evt);
            }
        });

        buttonLessThan.setBackground(new java.awt.Color(0, 251, 157));
        buttonLessThan.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonLessThan.setText("<");
        buttonLessThan.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonLessThan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLessThanActionPerformed(evt);
            }
        });

        buttonGreaterThan.setBackground(new java.awt.Color(0, 251, 157));
        buttonGreaterThan.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonGreaterThan.setText(">");
        buttonGreaterThan.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonGreaterThan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGreaterThanActionPerformed(evt);
            }
        });

        buttonNotEquals.setBackground(new java.awt.Color(0, 251, 157));
        buttonNotEquals.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonNotEquals.setText("!=");
        buttonNotEquals.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonNotEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNotEqualsActionPerformed(evt);
            }
        });

        buttonGreaterThanEquals.setBackground(new java.awt.Color(0, 251, 157));
        buttonGreaterThanEquals.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonGreaterThanEquals.setText(">=");
        buttonGreaterThanEquals.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonGreaterThanEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGreaterThanEqualsActionPerformed(evt);
            }
        });

        buttonLessThanEquals.setBackground(new java.awt.Color(0, 251, 157));
        buttonLessThanEquals.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonLessThanEquals.setText("<=");
        buttonLessThanEquals.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonLessThanEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLessThanEqualsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(buttonEquals, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonLessThanEquals, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(buttonLessThan, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonGreaterThan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(buttonOr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonLParen, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(buttonNot, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImplies, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(buttonRParen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonNotEquals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonGreaterThanEquals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonNot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonImplies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonOr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLParen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRParen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonLessThanEquals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonGreaterThanEquals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEquals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGreaterThan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLessThan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNotEquals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel6.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, 150, 150));

        atomsButton.setBackground(new java.awt.Color(137, 214, 98));
        atomsButton.setFont(new java.awt.Font("Cantarell", 1, 12)); // NOI18N
        atomsButton.setText("Atoms");
        atomsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atomsButtonActionPerformed(evt);
            }
        });

        agentsButton.setBackground(new java.awt.Color(79, 147, 159));
        agentsButton.setFont(new java.awt.Font("Cantarell", 1, 12)); // NOI18N
        agentsButton.setText("Agents");
        agentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agentsButtonActionPerformed(evt);
            }
        });

        stateList.setBackground(new java.awt.Color(251, 102, 102));
        stateList.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        stateList.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(stateList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(atomsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(agentsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(stateList, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agentsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(atomsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 340, -1));

        buttonModulus.setBackground(new java.awt.Color(68, 154, 188));
        buttonModulus.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonModulus.setText("mod");
        buttonModulus.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonModulus.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonModulus.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonModulus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModulusActionPerformed(evt);
            }
        });

        buttonSquare.setBackground(new java.awt.Color(68, 154, 188));
        buttonSquare.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonSquare.setText("sqr");
        buttonSquare.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonSquare.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonSquare.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSquareActionPerformed(evt);
            }
        });

        buttonSquareRoot.setBackground(new java.awt.Color(68, 154, 188));
        buttonSquareRoot.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonSquareRoot.setText("sqrt");
        buttonSquareRoot.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonSquareRoot.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonSquareRoot.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonSquareRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSquareRootActionPerformed(evt);
            }
        });

        buttonCheck.setBackground(new java.awt.Color(5, 255, 113));
        buttonCheck.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonCheck.setText("Check");
        buttonCheck.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(28, 29, 31), 1, true));
        buttonCheck.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonCheck.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonCheck.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckActionPerformed(evt);
            }
        });

        buttonC.setBackground(new java.awt.Color(5, 255, 113));
        buttonC.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonC.setText("C");
        buttonC.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(28, 29, 31), 1, true));
        buttonC.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonC.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonC.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });

        buttonD.setBackground(new java.awt.Color(129, 186, 134));
        buttonD.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonD.setText("D");
        buttonD.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonD.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonD.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDActionPerformed(evt);
            }
        });

        buttonE.setBackground(new java.awt.Color(129, 186, 134));
        buttonE.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonE.setText("E");
        buttonE.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonE.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonE.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEActionPerformed(evt);
            }
        });

        buttonClear.setBackground(new java.awt.Color(251, 102, 102));
        buttonClear.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonClear.setText("Clear");
        buttonClear.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonBackSpace.setBackground(new java.awt.Color(251, 102, 102));
        buttonBackSpace.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonBackSpace.setText("BS");
        buttonBackSpace.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonBackSpace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackSpaceActionPerformed(evt);
            }
        });

        buttonTrue.setBackground(new java.awt.Color(0, 225, 255));
        buttonTrue.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonTrue.setText("true");
        buttonTrue.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonTrue.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonTrue.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonTrue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTrueActionPerformed(evt);
            }
        });

        buttonFalse.setBackground(new java.awt.Color(255, 154, 0));
        buttonFalse.setFont(new java.awt.Font("Cantarell", 1, 10)); // NOI18N
        buttonFalse.setText("false");
        buttonFalse.setMaximumSize(new java.awt.Dimension(21, 36));
        buttonFalse.setMinimumSize(new java.awt.Dimension(21, 36));
        buttonFalse.setPreferredSize(new java.awt.Dimension(21, 33));
        buttonFalse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFalseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(buttonBackSpace, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonTrue, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonFalse, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(buttonModulus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(buttonE, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonSquare, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                            .addComponent(buttonD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonSquareRoot, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                            .addComponent(buttonC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBackSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTrue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonFalse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(buttonModulus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonSquare, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(buttonSquareRoot, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonE, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonD, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jPanel6.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, 180, 150));

        statusBarLabel.setFont(new java.awt.Font("Cantarell", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 914, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statusBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atomsButtonActionPerformed

        atomsPopup.show(atomsButton.getParent(), atomsButton.getX(), atomsButton.getY());
    }//GEN-LAST:event_atomsButtonActionPerformed

    private void agentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agentsButtonActionPerformed

        agentsPopup.show(agentsButton.getParent(), agentsButton.getX(), agentsButton.getY());
    }//GEN-LAST:event_agentsButtonActionPerformed

    private void agentsPopupPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_agentsPopupPropertyChange
        // TODO add your handling code here: 
    }//GEN-LAST:event_agentsPopupPropertyChange

    private void buttonImpliesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImpliesActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonImpliesActionPerformed

    private void buttonTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTwoActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonTwoActionPerformed

    private void buttonThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonThreeActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonThreeActionPerformed

    private void buttonPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlusActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonPlusActionPerformed

    private void buttonMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMinusActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonMinusActionPerformed

    private void buttonMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMultiplyActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonMultiplyActionPerformed

    private void buttonOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOneActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);

    }//GEN-LAST:event_buttonOneActionPerformed

    private void buttonFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFourActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonFourActionPerformed

    private void buttonFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFiveActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonFiveActionPerformed

    private void buttonSixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSixActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonSixActionPerformed

    private void buttonSevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSevenActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonSevenActionPerformed

    private void buttonEightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEightActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonEightActionPerformed

    private void buttonNineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNineActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonNineActionPerformed

    private void buttonDecimalPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecimalPointActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonDecimalPointActionPerformed

    private void buttonZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZeroActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
        // EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonZeroActionPerformed

    private void buttonBackSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackSpaceActionPerformed

        if (!displayTextField.getText().isEmpty()) {
            EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
            EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
            EpistemicKeypad.sbDisplayText.delete(EpistemicKeypad.sbDisplayText.length() - 1, EpistemicKeypad.sbDisplayText.length());
            displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        }
        //we pick the last item added to the backSpaceBuffer (which tells us the length of the last "command")
        // and we delete this length of characters from the end of the text in display
//        if (EpistemicKeypad.sbDisplayText.length() > 0) {
//            EpistemicKeypad.sbDisplayText.delete(EpistemicKeypad.sbDisplayText.length() - this.backSpaceBuffer.get(this.backSpaceBuffer.size() - 1), EpistemicKeypad.sbDisplayText.length());
//            displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
//
//            //now we also remove that read last item from the backSpaceBuffer, to remain current
//            EpistemicKeypad.backSpaceBuffer.remove(this.backSpaceBuffer.size() - 1);
//        } 
    }//GEN-LAST:event_buttonBackSpaceActionPerformed

    private void buttonDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDivideActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonDivideActionPerformed

    private void buttonNotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNotActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonNotActionPerformed

    private void buttonAndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAndActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonAndActionPerformed

    private void buttonOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOrActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonOrActionPerformed

    private void buttonLParenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLParenActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonLParenActionPerformed

    private void buttonRParenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRParenActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonRParenActionPerformed

    private void buttonEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEActionPerformed

        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append("#");
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonEActionPerformed

    private void buttonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDActionPerformed

        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        //the following three lines makes it easier to combine GUI buttons and manual editing, as per 
        //continuous appending using the GUI buttons after some intermitent typing
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(":>");
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);

    }//GEN-LAST:event_buttonDActionPerformed

    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed

        //it's the same as checking the given property on all on the entire states on the model
        // rather than on one state. So here we are reusing the code for "checkModel" but with
        // the modification of runing it for all states, i.e. the first item on the state select list
        // which is a wildcard '*'
        String eProperty = this.displayTextField.getText();
        if (!eProperty.isEmpty()) {
            //first save the formula in history, if it is not already there
            if (!propertyHistory.contains(eProperty)) {
                propertyHistory.add(eProperty);
                historyCounter = propertyHistory.size();
            }
            eProperty = "{".concat(eProperty).concat(";}");
            String result = Utilities.checkModel(eProperty, "*");// let the state list be all (ie
            // clear the display and set the result of model checking
            // clear the display
            EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
            if (!Utilities.thereWasError) {
                displayTextField.setText(result);
            } else {
                Utilities.thereWasError = false; //we are here resetting this variable for next time
            }
            //          displayTextField.setText(result);
//            EpistemicKeypad.backSpaceBuffer.clear();
        }

        displayTextField.setEditable(false);
    }//GEN-LAST:event_buttonCActionPerformed

    private void buttonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckActionPerformed
        // here do all the string transformations
        String eProperty = this.displayTextField.getText();
        if (!eProperty.isEmpty()) {
            //first save the formula in history, if it is not already there
            if (!propertyHistory.contains(eProperty)) {
                propertyHistory.add(eProperty);
                historyCounter = propertyHistory.size();
            }
            eProperty = "{".concat(eProperty).concat(";}");
            String result = Utilities.checkModel(eProperty, stateList.getSelectedItem().toString().split(":")[0].trim());
            // clear the display and set the result of model checking
            // clear the display
            EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
            if (!Utilities.thereWasError) {
                displayTextField.setText(result);
            } else {
                Utilities.thereWasError = false; //we are here resetting this variable for next time
            }
//            EpistemicKeypad.backSpaceBuffer.clear();
        }

        displayTextField.setEditable(false);


    }//GEN-LAST:event_buttonCheckActionPerformed

    private void buttonLessThanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLessThanActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonLessThanActionPerformed

    private void buttonModulusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModulusActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonModulusActionPerformed

    private void buttonSquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSquareActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonSquareActionPerformed

    private void buttonGreaterThanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGreaterThanActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonGreaterThanActionPerformed

    private void buttonLessThanEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLessThanEqualsActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonLessThanEqualsActionPerformed

    private void buttonSquareRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSquareRootActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonSquareRootActionPerformed

    private void buttonNotEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNotEqualsActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
        //this is to enable some reasonable backspace action when hand typing is combined with button presses
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonNotEqualsActionPerformed

    private void buttonGreaterThanEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGreaterThanEqualsActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonGreaterThanEqualsActionPerformed

    private void buttonEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEqualsActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonEqualsActionPerformed

    private void buttonAtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAtActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonAtActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        // clear the display
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        displayTextField.setText("");
//        EpistemicKeypad.backSpaceBuffer.clear();
        displayTextField.setEditable(false);
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonFalseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFalseActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);

    }//GEN-LAST:event_buttonFalseActionPerformed

    private void buttonTrueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrueActionPerformed
        //delete all in the buffer, get whatever is on the screen and append this to the buffer,
        // then append the newly entered
        int len = EpistemicKeypad.sbDisplayText.length();
        EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
        EpistemicKeypad.sbDisplayText.append(displayTextField.getText());
        EpistemicKeypad.sbDisplayText.append(evt.getActionCommand());
        //you could also add this chunk to an arraylist so as to facilitate backspace
        displayTextField.setText(EpistemicKeypad.sbDisplayText.toString());
        //add the difference between previous length of string on display, and current length of string
//        EpistemicKeypad.backSpaceBuffer.add(EpistemicKeypad.sbDisplayText.length() - len);
    }//GEN-LAST:event_buttonTrueActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        displayTextField.setEditable(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void upHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upHistoryButtonActionPerformed
        if (this.historyCounter > 0) {
            this.historyCounter--;
            displayTextField.setText(this.propertyHistory.get(this.historyCounter));
            EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
            EpistemicKeypad.sbDisplayText.append(this.propertyHistory.get(this.historyCounter));
        }

    }//GEN-LAST:event_upHistoryButtonActionPerformed

    private void downHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downHistoryButtonActionPerformed

        if (this.historyCounter < this.propertyHistory.size() - 1) {
            this.historyCounter++;
            displayTextField.setText(this.propertyHistory.get(this.historyCounter));
            EpistemicKeypad.sbDisplayText.delete(0, EpistemicKeypad.sbDisplayText.length());
            EpistemicKeypad.sbDisplayText.append(this.propertyHistory.get(this.historyCounter));
        }
    }//GEN-LAST:event_downHistoryButtonActionPerformed

    private void buttonCounterModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCounterModelActionPerformed
        try {
            //now display the generated image
            //    Runtime.getRuntime().exec("gpicview /home/knight/Documents/CSAD/finalproject/codes/cup/generated_dots/temp/counterModel.jpg");
            //Runtime.getRuntime().exec("C:/Windows/System32/rundll32.exe \"C:/Program Files/Windows Photo Viewer/PhotoViewer.dll\", ImageView_Fullscreen D:\\DropboxDrive\\Dropbox\\codes\\VisualDEL\\dots\\counterModel.jpg");
            String graphFilePath = System.getProperty("user.dir").replace('\\', '/').concat("/dots/counterModel.jpg");
            new ImageViewer(graphFilePath);
        } catch (IOException ex) {
            Logger.getLogger(EpistemicKeypad.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(EpistemicKeypad.class.getName()).log(Level.SEVERE, null, ex);
        }
        buttonCounterModel.setEnabled(false);
    }//GEN-LAST:event_buttonCounterModelActionPerformed

    private void buttonSyntaxTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSyntaxTreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonSyntaxTreeActionPerformed

    private void buttonGenerateModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateModelActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String graphFileName = StringUtils.substringBefore(Utilities.dotFileName, ".").concat(".jpg");
                try {
                    System.out.println("Working Directory = "
                            + System.getProperty("user.dir"));
                    String dotFilePath = System.getProperty("user.dir").replace('\\', '/') + "/dots/" + Utilities.dotFileName;
                    System.out.println(dotFilePath);
                    
                    String graphFilePath = System.getProperty("user.dir").replace('\\', '/') + "/dots/" + graphFileName;
                    System.out.println(graphFilePath);
                    Runtime.getRuntime().exec("dot -Tjpg " + dotFilePath + " -o " + graphFilePath);
                    new ImageViewer(graphFilePath);
                    //Runtime.getRuntime().exec("C:/Windows/System32/rundll32.exe \"C:/Program Files/Windows Photo Viewer/PhotoViewer.dll\", ImageView_Fullscreen D:\\DropboxDrive\\Dropbox\\codes\\VisualDEL\\dots\\" + graphFileName);
                } catch (IOException ex) {
                    Logger.getLogger(EpistemicKeypad.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(EpistemicKeypad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_buttonGenerateModelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EpistemicKeypad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EpistemicKeypad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EpistemicKeypad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EpistemicKeypad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EpistemicKeypad().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agentsButton;
    private javax.swing.JPopupMenu agentsPopup;
    private javax.swing.JButton atomsButton;
    private javax.swing.JPopupMenu atomsPopup;
    private javax.swing.JButton buttonAnd;
    private javax.swing.JButton buttonAt;
    private javax.swing.JButton buttonBackSpace;
    private javax.swing.JButton buttonC;
    private javax.swing.JButton buttonCheck;
    private javax.swing.JButton buttonClear;
    public static javax.swing.JButton buttonCounterModel;
    private javax.swing.JButton buttonD;
    private javax.swing.JButton buttonDecimalPoint;
    private javax.swing.JButton buttonDivide;
    private javax.swing.JButton buttonE;
    private javax.swing.JButton buttonEight;
    private javax.swing.JButton buttonEquals;
    private javax.swing.JButton buttonFalse;
    private javax.swing.JButton buttonFive;
    private javax.swing.JButton buttonFour;
    private javax.swing.JButton buttonGenerateModel;
    private javax.swing.JButton buttonGreaterThan;
    private javax.swing.JButton buttonGreaterThanEquals;
    private javax.swing.JButton buttonImplies;
    private javax.swing.JButton buttonLParen;
    private javax.swing.JButton buttonLessThan;
    private javax.swing.JButton buttonLessThanEquals;
    private javax.swing.JButton buttonMinus;
    private javax.swing.JButton buttonModulus;
    private javax.swing.JButton buttonMultiply;
    private javax.swing.JButton buttonNine;
    private javax.swing.JButton buttonNot;
    private javax.swing.JButton buttonNotEquals;
    private javax.swing.JButton buttonOne;
    private javax.swing.JButton buttonOr;
    private javax.swing.JButton buttonPlus;
    private javax.swing.JButton buttonRParen;
    private javax.swing.JButton buttonSeven;
    private javax.swing.JButton buttonSix;
    private javax.swing.JButton buttonSquare;
    private javax.swing.JButton buttonSquareRoot;
    private javax.swing.JButton buttonSyntaxTree;
    private javax.swing.JButton buttonThree;
    private javax.swing.JButton buttonTrue;
    private javax.swing.JButton buttonTwo;
    private javax.swing.JButton buttonZero;
    public static javax.swing.JTextArea displayTextField;
    private javax.swing.JButton downHistoryButton;
    private javax.swing.JButton editButton;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox stateList;
    private javax.swing.JLabel statusBarLabel;
    private javax.swing.JButton upHistoryButton;
    // End of variables declaration//GEN-END:variables
}

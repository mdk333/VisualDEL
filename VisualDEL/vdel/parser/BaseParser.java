package vdel.parser;

import vdel.utilities.Utilities;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 17 12:22:27 BST 2012
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated BaseParser.
  * @version Fri Aug 17 12:22:27 BST 2012
  */
public class BaseParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BaseParser() {super();}

  /** Constructor which sets the default scanner. */
  public BaseParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BaseParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\042\002\000\002\002\006\000\002\002" +
    "\004\000\002\043\002\000\002\044\002\000\002\003\007" +
    "\000\002\004\003\000\002\007\004\000\002\007\003\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\015\004\000\002\016\011\000\002\017\007\000\002\020" +
    "\005\000\002\020\003\000\002\021\003\000\002\005\003" +
    "\000\002\010\004\000\002\010\003\000\002\045\002\000" +
    "\002\013\006\000\002\006\003\000\002\011\004\000\002" +
    "\011\003\000\002\014\003\000\002\014\003\000\002\046" +
    "\002\000\002\026\007\000\002\047\002\000\002\026\007" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\034\005\000\002\034\006\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\006\000\002\034\007" +
    "\000\002\034\010\000\002\034\004\000\002\034\005\000" +
    "\002\034\004\000\002\034\005\000\002\034\006\000\002" +
    "\034\007\000\002\034\004\000\002\034\005\000\002\034" +
    "\004\000\002\034\005\000\002\034\006\000\002\034\007" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\004\000\002\041\003\000\002\041\005\000\002" +
    "\025\003\000\002\025\003\000\002\050\002\000\002\027" +
    "\006\000\002\051\002\000\002\030\011\000\002\052\002" +
    "\000\002\030\011\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\004" +
    "\000\002\035\003\000\002\035\003\000\002\035\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\050\005\001\002\000\004\002\311\001" +
    "\002\000\010\004\011\017\007\020\006\001\002\000\004" +
    "\005\301\001\002\000\004\005\273\001\002\000\004\052" +
    "\272\001\002\000\004\005\271\001\002\000\004\052\270" +
    "\001\002\000\012\004\011\012\ufffb\017\007\020\006\001" +
    "\002\000\004\012\ufffe\001\002\000\012\004\ufff9\012\ufff9" +
    "\017\ufff9\020\ufff9\001\002\000\004\051\001\001\002\000" +
    "\004\052\020\001\002\000\012\004\ufff6\012\ufff6\017\ufff6" +
    "\020\ufff6\001\002\000\004\051\022\001\002\000\004\002" +
    "\000\001\002\000\004\012\024\001\002\000\004\006\264" +
    "\001\002\000\014\007\uffed\012\uffed\021\uffed\022\uffed\023" +
    "\uffed\001\002\000\012\007\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\001\002\000\014\007\uffef\012\024\021\uffef\022\uffef\023" +
    "\uffef\001\002\000\014\007\uffee\012\uffee\021\uffee\022\uffee" +
    "\023\uffee\001\002\000\012\007\037\021\035\022\032\023" +
    "\041\001\002\000\004\021\253\001\002\000\014\007\037" +
    "\021\035\022\032\023\041\051\uffea\001\002\000\014\007" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\051\uffc1\001\002\000\022" +
    "\007\067\011\053\024\051\025\054\033\066\034\064\046" +
    "\115\053\117\001\002\000\014\007\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\051\uffe6\001\002\000\004\016\243\001\002\000" +
    "\014\007\uffc0\021\uffc0\022\uffc0\023\uffc0\051\uffc0\001\002" +
    "\000\004\021\045\001\002\000\014\007\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\051\uffe7\001\002\000\004\051\ufffc\001\002" +
    "\000\014\007\uffe8\021\uffe8\022\uffe8\023\uffe8\051\uffe8\001" +
    "\002\000\026\007\056\011\053\014\057\015\046\024\051" +
    "\025\054\033\066\034\064\046\061\053\065\001\002\000" +
    "\030\007\056\011\053\014\057\015\046\024\051\025\054" +
    "\033\066\034\064\046\061\053\065\055\240\001\002\000" +
    "\012\043\143\044\144\045\142\052\uffde\001\002\000\042" +
    "\027\101\030\100\031\uffa8\032\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\047\077\052\uffa8\054\uffa8\001\002\000\014\043\uffad\044" +
    "\uffad\045\uffad\052\uffad\054\uffad\001\002\000\004\052\uffe5" +
    "\001\002\000\042\027\uff9f\030\uff9f\031\uff9f\032\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\047\uff9f\052\uff9f\054\uff9f\001\002\000" +
    "\014\043\uffac\044\uffac\045\uffac\052\uffac\054\uffac\001\002" +
    "\000\042\027\uffa1\030\uffa1\031\uffa1\032\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\047\uffa1\052\uffa1\054\uffa1\001\002\000\036\013" +
    "\151\027\uffa0\030\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\046\152\047\uffa0\054" +
    "\uffa0\001\002\000\030\007\056\011\053\014\057\015\046" +
    "\024\051\025\054\033\066\034\064\046\061\053\065\055" +
    "\231\001\002\000\022\031\074\032\075\035\126\036\127" +
    "\037\123\040\125\041\130\042\124\001\002\000\026\007" +
    "\067\011\053\014\203\015\202\024\051\025\054\033\066" +
    "\034\064\046\115\053\117\001\002\000\010\043\222\044" +
    "\223\045\221\001\002\000\042\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\052\uffa4\054\uffa4" +
    "\001\002\000\014\007\067\011\053\033\066\034\064\053" +
    "\071\001\002\000\026\007\056\011\053\014\057\015\046" +
    "\024\051\025\054\033\066\034\064\046\061\053\065\001" +
    "\002\000\014\007\067\011\053\033\066\034\064\053\071" +
    "\001\002\000\042\027\uffa0\030\uffa0\031\uffa0\032\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\047\uffa0\052\uffa0\054\uffa0\001\002\000" +
    "\042\027\uffa3\030\uffa3\031\uffa3\032\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\047\uffa3\052\uffa3\054\uffa3\001\002\000\014\007\067" +
    "\011\053\033\066\034\064\053\071\001\002\000\010\031" +
    "\074\032\075\054\073\001\002\000\042\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\047\uff9e\052\uff9e" +
    "\054\uff9e\001\002\000\014\007\067\011\053\033\066\034" +
    "\064\053\071\001\002\000\014\007\067\011\053\033\066" +
    "\034\064\053\071\001\002\000\042\027\101\030\100\031" +
    "\uffa9\032\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047\077\052\uffa9\054" +
    "\uffa9\001\002\000\014\007\067\011\053\033\066\034\064" +
    "\053\071\001\002\000\014\007\067\011\053\033\066\034" +
    "\064\053\071\001\002\000\014\007\067\011\053\033\066" +
    "\034\064\053\071\001\002\000\042\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\047\uffa7\052\uffa7\054" +
    "\uffa7\001\002\000\042\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\047\uffa6\052\uffa6\054\uffa6\001\002" +
    "\000\042\027\uffa5\030\uffa5\031\uffa5\032\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\047\uffa5\052\uffa5\054\uffa5\001\002\000\042\027" +
    "\101\030\100\031\uffaa\032\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047" +
    "\077\052\uffaa\054\uffaa\001\002\000\012\043\143\044\144" +
    "\045\142\054\141\001\002\000\024\031\074\032\075\035" +
    "\126\036\127\037\123\040\125\041\130\042\124\054\073" +
    "\001\002\000\012\043\113\044\114\045\111\054\112\001" +
    "\002\000\022\007\067\011\053\024\051\025\054\033\066" +
    "\034\064\046\115\053\117\001\002\000\014\043\uffab\044" +
    "\uffab\045\uffab\052\uffab\054\uffab\001\002\000\022\007\067" +
    "\011\053\024\051\025\054\033\066\034\064\046\115\053" +
    "\117\001\002\000\022\007\067\011\053\024\051\025\054" +
    "\033\066\034\064\046\115\053\117\001\002\000\022\007" +
    "\067\011\053\024\051\025\054\033\066\034\064\046\115" +
    "\053\117\001\002\000\014\043\uffb8\044\uffb8\045\111\052" +
    "\uffb8\054\uffb8\001\002\000\022\007\067\011\053\024\051" +
    "\025\054\033\066\034\064\046\115\053\117\001\002\000" +
    "\014\043\113\044\114\045\111\052\uffae\054\uffae\001\002" +
    "\000\014\043\uffb9\044\uffb9\045\111\052\uffb9\054\uffb9\001" +
    "\002\000\014\043\uffb7\044\uffb7\045\uffb7\052\uffb7\054\uffb7" +
    "\001\002\000\014\007\067\011\053\033\066\034\064\053" +
    "\071\001\002\000\022\007\067\011\053\024\051\025\054" +
    "\033\066\034\064\046\115\053\117\001\002\000\014\007" +
    "\067\011\053\033\066\034\064\053\071\001\002\000\022" +
    "\007\067\011\053\024\051\025\054\033\066\034\064\046" +
    "\115\053\117\001\002\000\014\007\067\011\053\033\066" +
    "\034\064\053\071\001\002\000\014\007\067\011\053\033" +
    "\066\034\064\053\071\001\002\000\020\031\074\032\075" +
    "\043\uffb1\044\uffb1\045\uffb1\052\uffb1\054\uffb1\001\002\000" +
    "\020\031\074\032\075\043\uffb4\044\uffb4\045\uffb4\052\uffb4" +
    "\054\uffb4\001\002\000\034\031\074\032\075\035\126\036" +
    "\127\037\123\040\125\041\130\042\124\043\uffb6\044\uffb6" +
    "\045\uffb6\052\uffb6\054\uffb6\001\002\000\014\043\uffb5\044" +
    "\uffb5\045\uffb5\052\uffb5\054\uffb5\001\002\000\020\031\074" +
    "\032\075\043\uffb2\044\uffb2\045\uffb2\052\uffb2\054\uffb2\001" +
    "\002\000\034\031\074\032\075\035\126\036\127\037\123" +
    "\040\125\041\130\042\124\043\uffb0\044\uffb0\045\uffb0\052" +
    "\uffb0\054\uffb0\001\002\000\014\043\uffaf\044\uffaf\045\uffaf" +
    "\052\uffaf\054\uffaf\001\002\000\020\031\074\032\075\043" +
    "\uffb3\044\uffb3\045\uffb3\052\uffb3\054\uffb3\001\002\000\014" +
    "\043\uffd8\044\uffd8\045\uffd8\052\uffd8\054\uffd8\001\002\000" +
    "\014\007\147\014\057\015\046\046\146\053\150\001\002" +
    "\000\014\007\147\014\057\015\046\046\146\053\150\001" +
    "\002\000\014\007\147\014\057\015\046\046\146\053\150" +
    "\001\002\000\014\043\uffda\044\uffda\045\142\052\uffda\054" +
    "\uffda\001\002\000\006\014\203\015\202\001\002\000\006" +
    "\013\151\046\152\001\002\000\014\007\147\014\057\015" +
    "\046\046\146\053\150\001\002\000\030\007\056\011\053" +
    "\014\057\015\046\024\051\025\054\033\066\034\064\046" +
    "\061\053\065\055\177\001\002\000\004\013\153\001\002" +
    "\000\030\007\056\011\053\014\057\015\046\024\051\025" +
    "\054\033\066\034\064\046\061\053\065\055\156\001\002" +
    "\000\014\043\143\044\144\045\142\052\uffdc\054\uffdc\001" +
    "\002\000\014\043\113\044\114\045\111\052\uffd6\054\uffd6" +
    "\001\002\000\010\007\160\046\157\053\162\001\002\000" +
    "\010\007\160\046\157\053\162\001\002\000\014\043\uffc3" +
    "\044\uffc3\045\uffc3\054\uffc3\056\uffc3\001\002\000\012\043" +
    "\166\044\167\045\165\056\173\001\002\000\010\007\160" +
    "\046\157\053\162\001\002\000\012\043\166\044\167\045" +
    "\165\054\164\001\002\000\014\043\uffc2\044\uffc2\045\uffc2" +
    "\054\uffc2\056\uffc2\001\002\000\010\007\160\046\157\053" +
    "\162\001\002\000\010\007\160\046\157\053\162\001\002" +
    "\000\010\007\160\046\157\053\162\001\002\000\014\043" +
    "\uffc6\044\uffc6\045\165\054\uffc6\056\uffc6\001\002\000\014" +
    "\043\uffc7\044\uffc7\045\165\054\uffc7\056\uffc7\001\002\000" +
    "\014\043\uffc5\044\uffc5\045\uffc5\054\uffc5\056\uffc5\001\002" +
    "\000\014\043\uffd4\044\uffd4\045\uffd4\052\uffd4\054\uffd4\001" +
    "\002\000\014\043\166\044\167\045\165\054\uffc4\056\uffc4" +
    "\001\002\000\014\043\143\044\144\045\142\052\uffdd\054" +
    "\uffdd\001\002\000\014\043\113\044\114\045\111\052\uffd7" +
    "\054\uffd7\001\002\000\010\007\160\046\157\053\162\001" +
    "\002\000\012\043\166\044\167\045\165\056\201\001\002" +
    "\000\014\043\uffd5\044\uffd5\045\uffd5\052\uffd5\054\uffd5\001" +
    "\002\000\030\007\056\011\053\014\057\015\046\024\051" +
    "\025\054\033\066\034\064\046\061\053\065\055\213\001" +
    "\002\000\030\007\056\011\053\014\057\015\046\024\051" +
    "\025\054\033\066\034\064\046\061\053\065\055\206\001" +
    "\002\000\014\043\143\044\144\045\142\052\uffcc\054\uffcc" +
    "\001\002\000\014\043\113\044\114\045\111\052\uffca\054" +
    "\uffca\001\002\000\010\007\160\046\157\053\162\001\002" +
    "\000\012\043\166\044\167\045\165\056\210\001\002\000" +
    "\014\043\uffc8\044\uffc8\045\uffc8\052\uffc8\054\uffc8\001\002" +
    "\000\014\043\143\044\144\045\142\052\uffd2\054\uffd2\001" +
    "\002\000\014\043\113\044\114\045\111\052\uffd0\054\uffd0" +
    "\001\002\000\010\007\160\046\157\053\162\001\002\000" +
    "\012\043\166\044\167\045\165\056\215\001\002\000\014" +
    "\043\uffce\044\uffce\045\uffce\052\uffce\054\uffce\001\002\000" +
    "\014\043\uffdb\044\uffdb\045\142\052\uffdb\054\uffdb\001\002" +
    "\000\014\043\uffd9\044\uffd9\045\uffd9\052\uffd9\054\uffd9\001" +
    "\002\000\042\027\uffa2\030\uffa2\031\uffa2\032\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\047\uffa2\052\uffa2\054\uffa2\001\002\000\026" +
    "\007\056\011\053\014\057\015\046\024\051\025\054\033" +
    "\066\034\064\046\061\053\065\001\002\000\026\007\056" +
    "\011\053\014\057\015\046\024\051\025\054\033\066\034" +
    "\064\046\061\053\065\001\002\000\026\007\056\011\053" +
    "\014\057\015\046\024\051\025\054\033\066\034\064\046" +
    "\061\053\065\001\002\000\012\043\143\044\144\045\142" +
    "\052\uffe0\001\002\000\012\043\143\044\144\045\142\052" +
    "\uffe1\001\002\000\012\043\143\044\144\045\142\052\uffdf" +
    "\001\002\000\014\043\143\044\144\045\142\052\uffcd\054" +
    "\uffcd\001\002\000\014\043\113\044\114\045\111\052\uffcb" +
    "\054\uffcb\001\002\000\010\007\160\046\157\053\162\001" +
    "\002\000\012\043\166\044\167\045\165\056\233\001\002" +
    "\000\014\043\uffc9\044\uffc9\045\uffc9\052\uffc9\054\uffc9\001" +
    "\002\000\004\052\235\001\002\000\014\007\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\051\uffe4\001\002\000\014\043\143\044" +
    "\144\045\142\052\uffd3\054\uffd3\001\002\000\014\043\113" +
    "\044\114\045\111\052\uffd1\054\uffd1\001\002\000\010\007" +
    "\160\046\157\053\162\001\002\000\012\043\166\044\167" +
    "\045\165\056\242\001\002\000\014\043\uffcf\044\uffcf\045" +
    "\uffcf\052\uffcf\054\uffcf\001\002\000\004\007\244\001\002" +
    "\000\004\052\uffe3\001\002\000\004\052\246\001\002\000" +
    "\014\007\uffe2\021\uffe2\022\uffe2\023\uffe2\051\uffe2\001\002" +
    "\000\012\043\113\044\114\045\111\052\uffbf\001\002\000" +
    "\004\052\251\001\002\000\014\007\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\051\uffbe\001\002\000\014\007\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\051\uffe9\001\002\000\004\007\254\001\002" +
    "\000\004\026\255\001\002\000\022\007\067\011\053\024" +
    "\051\025\054\033\066\034\064\046\115\053\117\001\002" +
    "\000\024\031\074\032\075\035\126\036\127\037\123\040" +
    "\125\041\130\042\124\052\uffbd\001\002\000\012\043\113" +
    "\044\114\045\111\052\uffbb\001\002\000\004\052\261\001" +
    "\002\000\014\007\uffba\021\uffba\022\uffba\023\uffba\051\uffba" +
    "\001\002\000\004\052\263\001\002\000\014\007\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\051\uffbc\001\002\000\004\052\uffec" +
    "\001\002\000\004\052\266\001\002\000\014\007\uffeb\012" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\001\002\000\012\004\ufffa" +
    "\012\ufffa\017\ufffa\020\ufffa\001\002\000\012\004\ufff8\012" +
    "\ufff8\017\ufff8\020\ufff8\001\002\000\004\052\ufff5\001\002" +
    "\000\012\004\ufff7\012\ufff7\017\ufff7\020\ufff7\001\002\000" +
    "\004\053\274\001\002\000\004\011\275\001\002\000\004" +
    "\057\276\001\002\000\004\011\277\001\002\000\004\054" +
    "\300\001\002\000\004\052\ufff4\001\002\000\004\053\302" +
    "\001\002\000\004\007\304\001\002\000\006\054\307\057" +
    "\306\001\002\000\006\054\ufff0\057\ufff0\001\002\000\006" +
    "\054\ufff1\057\ufff1\001\002\000\004\007\304\001\002\000" +
    "\004\052\ufff3\001\002\000\006\054\ufff2\057\ufff2\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\015\004\013\007\012\012\014\015\011\016\007" +
    "\017\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\266\015\011\016\007\017\016\001\001\000\004\043" +
    "\022\001\001\000\002\001\001\000\004\042\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\025\010\026\013\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\030\001" +
    "\001\000\004\013\027\001\001\000\002\001\001\000\020" +
    "\006\042\011\032\014\043\025\035\026\041\027\033\030" +
    "\037\001\001\000\002\001\001\000\014\014\251\025\035" +
    "\026\041\027\033\030\037\001\001\000\002\001\001\000" +
    "\014\031\057\032\047\033\062\035\246\037\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\031\057\032\047\033\062\034\046\035" +
    "\061\036\051\037\054\001\001\000\016\031\057\032\047" +
    "\033\062\034\235\035\236\037\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\057\032\047\033\062" +
    "\034\226\035\227\037\054\001\001\000\002\001\001\000" +
    "\014\031\057\032\047\033\062\035\117\037\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\217\037" +
    "\054\001\001\000\016\031\106\032\047\033\062\034\105" +
    "\035\107\037\054\001\001\000\006\033\067\037\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\071" +
    "\032\047\033\062\037\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\104\033\062\037\054\001\001" +
    "\000\010\032\075\033\062\037\054\001\001\000\002\001" +
    "\001\000\006\033\103\037\054\001\001\000\006\033\102" +
    "\037\054\001\001\000\006\033\101\037\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\057\032\047\033\062\035\121\037\054" +
    "\001\001\000\002\001\001\000\014\031\057\032\047\033" +
    "\062\035\120\037\054\001\001\000\014\031\057\032\047" +
    "\033\062\035\115\037\054\001\001\000\014\031\057\032" +
    "\047\033\062\035\117\037\054\001\001\000\002\001\001" +
    "\000\014\031\106\032\047\033\062\035\107\037\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\137\032\047\033\062\037\054\001\001\000" +
    "\014\031\135\032\047\033\062\035\136\037\054\001\001" +
    "\000\012\031\134\032\047\033\062\037\054\001\001\000" +
    "\014\031\132\032\047\033\062\035\133\037\054\001\001" +
    "\000\012\031\131\032\047\033\062\037\054\001\001\000" +
    "\012\031\130\032\047\033\062\037\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\216\001" +
    "\001\000\004\034\215\001\001\000\004\034\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\105\001\001\000\016\031\057\032\047\033\062" +
    "\034\174\035\175\037\054\001\001\000\002\001\001\000" +
    "\016\031\057\032\047\033\062\034\153\035\154\037\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\160\001\001\000\004\041\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\171\001\001\000\004" +
    "\041\170\001\001\000\004\041\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\057\032\047\033\062\034\210\035\211\037" +
    "\054\001\001\000\016\031\057\032\047\033\062\034\203" +
    "\035\204\037\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\057\032\047\033\062\034\225\035\121\037\054\001\001" +
    "\000\016\031\057\032\047\033\062\034\224\035\120\037" +
    "\054\001\001\000\016\031\057\032\047\033\062\034\223" +
    "\035\115\037\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\255\032\047\033\062\035\256\037\054\001\001\000\004" +
    "\051\261\001\001\000\004\052\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\302\021\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 


  private final BaseParser parser;

  /** Constructor */
  CUP$parser$actions(BaseParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // leaf ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(".concat(be).concat(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leaf",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // leaf ::= DOUBLE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        	RESULT = id.toString(); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leaf",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // leaf ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        RESULT = id;
        Utilities.inConstraintIdentifiers.add(id); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("leaf",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unary_expr ::= leaf 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unary_expr ::= SQUARE unary_expr 
            {
              String RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "sqr".concat(ue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unary_expr ::= SQUAREROOT unary_expr 
            {
              String RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "sqrt".concat(ue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // term ::= unary_expr 
            {
              String RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= term MOD unary_expr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.concat("|").concat(ue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= term DIVIDE unary_expr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.concat("/").concat(ue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= term MULTIPLY unary_expr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t.concat("*").concat(ue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr MINUS term 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("-").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr PLUS term 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("+").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolean_expr ::= LPAREN boolean_expr RPAREN 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(".concat(be).concat(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolean_expr ::= FALSE 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolean_expr ::= TRUE 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolean_expr ::= NOT boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!".concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boolean_expr ::= expr NOTEQUAL boolean_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("!=").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolean_expr ::= expr NOTEQUAL expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("!=").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolean_expr ::= expr GREATERTHANEQUAL expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat(">=").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolean_expr ::= expr GREATERTHAN expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat(">").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolean_expr ::= expr LESSTHANEQUAL expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("<=").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolean_expr ::= expr LESSTHAN expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("<").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolean_expr ::= expr DOUBLEEQUALS boolean_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("==").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolean_expr ::= expr DOUBLEEQUALS expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e.concat("==").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolean_expr ::= boolean_expr IMPLIES boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be.concat("->").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolean_expr ::= boolean_expr OR boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be.concat("||").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolean_expr ::= boolean_expr AND boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be.concat("&&").concat(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dynamic_constraint ::= DYNAMIC_KW CONSTRAINT_KW IDENTIFIER EQUALS boolean_expr NT$8 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dynamic_constraint",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
			Utilities.processDynamicExpression(id, be);
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dynamic_constraint ::= DYNAMIC_KW CONSTRAINT_KW IDENTIFIER EQUALS expr NT$7 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dynamic_constraint",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			// the difference between this and the static_constraint is that the lvar is no longer none
			Utilities.processDynamicExpression(id, e);
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // static_constraint ::= CONSTRAINT_KW boolean_expr NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_constraint",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$6 ::= 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
		
			Utilities.processBoolExpression(be);
	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // propositional_constraint ::= dynamic_constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_constraint",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // propositional_constraint ::= static_constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_constraint",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // phi ::= LPAREN phi RPAREN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(".concat(p).concat(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // phi ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // phi ::= NOT phi 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!".concat(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // phi ::= phi IMPLIES phi 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p1.concat("->").concat(p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // phi ::= phi OR phi 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p1.concat("||").concat(p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // phi ::= phi AND phi 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p1.concat("&&").concat(p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // epistemic_fact ::= NOT DISTKNOWLEDGE LBRACKET phi RBRACKET 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "!:>[".concat(p).concat("]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // epistemic_fact ::= DISTKNOWLEDGE LBRACKET phi RBRACKET 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ":>[".concat(p).concat("]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // epistemic_fact ::= NOT DISTKNOWLEDGE boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!:>".concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // epistemic_fact ::= DISTKNOWLEDGE boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ":>".concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // epistemic_fact ::= NOT DISTKNOWLEDGE epistemic_fact 
            {
              String RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String epe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!:>".concat(epe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // epistemic_fact ::= DISTKNOWLEDGE epistemic_fact 
            {
              String RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String epe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ":>".concat(epe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // epistemic_fact ::= NOT EVERYBODYKNOWS LBRACKET phi RBRACKET 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "!#[".concat(p).concat("]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // epistemic_fact ::= EVERYBODYKNOWS LBRACKET phi RBRACKET 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "#[".concat(p).concat("]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // epistemic_fact ::= NOT EVERYBODYKNOWS boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!#".concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // epistemic_fact ::= EVERYBODYKNOWS boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "#".concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // epistemic_fact ::= NOT EVERYBODYKNOWS epistemic_fact 
            {
              String RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String epe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!#".concat(epe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // epistemic_fact ::= EVERYBODYKNOWS epistemic_fact 
            {
              String RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String epe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "#".concat(epe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // epistemic_fact ::= IDENTIFIER NOT KNOWS LBRACKET phi RBRACKET 
            {
              String RESULT =null;
		int agleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int agright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ag.concat("!@[").concat(p).concat("]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // epistemic_fact ::= IDENTIFIER KNOWS LBRACKET phi RBRACKET 
            {
              String RESULT =null;
		int agleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int agright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ag.concat("@[").concat(p).concat("]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // epistemic_fact ::= IDENTIFIER NOT KNOWS boolean_expr 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.concat("!@").concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // epistemic_fact ::= IDENTIFIER KNOWS boolean_expr 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.concat("@").concat(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // epistemic_fact ::= LPAREN epistemic_fact RPAREN 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(".concat(ef).concat(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // epistemic_fact ::= epistemic_fact IMPLIES epistemic_fact 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efactleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efactright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String efact = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ef.concat("->").concat(efact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // epistemic_fact ::= epistemic_fact OR epistemic_fact 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efactleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efactright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String efact = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ef.concat("||").concat(efact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // epistemic_fact ::= epistemic_fact AND epistemic_fact 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efactleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efactright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String efact = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ef.concat("&&").concat(efact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // epistemic_fact ::= IDENTIFIER NOT KNOWS epistemic_fact 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int efactleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efactright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String efact = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.concat("!@").concat(efact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // epistemic_fact ::= IDENTIFIER KNOWS epistemic_fact 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efactleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efactright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String efact = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id.concat("@").concat(efact); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_fact",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // epistemic_property ::= epistemic_fact 
            {
              String RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = ef;
				 
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_property",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // epistemic_property ::= boolean_expr IMPLIES epistemic_fact 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = be.concat("->").concat(ef);
				 
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_property",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // epistemic_property ::= boolean_expr OR epistemic_fact 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = be.concat("||").concat(ef);
				 
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_property",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // epistemic_property ::= boolean_expr AND epistemic_fact 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	System.out.println("here I go+++++++++++++++++");
				 	RESULT = be.concat("&&").concat(ef);
				 
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_property",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // epistemic_constraint ::= IDENTIFIER OBSERVES IDENTIFIER NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int agIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int agIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String agId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int knIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int knIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String knId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_constraint",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =null;
		int agIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int agIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String agId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int knIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int knIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String knId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
					   //now handle the facts section
					   Utilities.processFacts(agId, knId);  	
				  
				  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // epistemic_constraint ::= EPISTEMIC_KW CONSTRAINT_KW epistemic_property NT$4 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epistemic_constraint",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				  	//Add this to the list of epistemic constraints
				  	ep = "{".concat(ep).concat(";}");   // terminates one constraint, and surrounds with delimiters so the one scanner used of epistemic constraint evaluator will know when to switch to a different state, and so be able to use a different sym class (ECESym) -- this was the same strategy we used for constraint evaluator (boolean)
				  	Utilities.processEpistemicFacts(ep);
				  	
				  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fact ::= propositional_constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fact ::= epistemic_constraint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fact_list ::= fact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fact_list ::= fact_list fact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // facts ::= fact_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("facts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // agent_declaration ::= AGENT AGENT_IDENTIFIER NT$3 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agent_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int agentIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int agentIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String agentId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

	
	//handle agent declaration
	Utilities.processAgentDeclaration(agentId);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // agent_declaration_list ::= agent_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agent_declaration_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // agent_declaration_list ::= agent_declaration_list agent_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agent_declaration_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // agents ::= agent_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agents",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // enum_value ::= IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//each time we find an enum value (string) we add it to the list of possible values (in the symbol table) for the concerned enum variable
				RESULT = s;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // enum_values_list ::= enum_value 
            {
              String RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = ev;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_values_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // enum_values_list ::= enum_values_list COMMA enum_value 
            {
              String RESULT =null;
		int evlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String evl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//each time we find an enum value (string) we add it to the list of possible values (in the symbol table) for the concerned enum variable
					RESULT = evl.concat(",").concat(ev);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_values_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // enum_declaration ::= ENUM ATOM_IDENTIFIER LPAREN enum_values_list RPAREN 
            {
              Object RESULT =null;
		int enumIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int enumIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String enumId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int evlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String evl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			// process the declaration of boolean type atoms
		 	Utilities.processEnumDeclaration(enumId, evl); 
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // int_declaration ::= INT ATOM_IDENTIFIER LPAREN DOUBLE COMMA DOUBLE RPAREN 
            {
              Object RESULT =null;
		int intIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int intIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String intId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lowerLimitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lowerLimitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double lowerLimit = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int upperLimitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int upperLimitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double upperLimit = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			// process the declaration of boolean type atoms
		 	Utilities.processIntDeclaration(intId, lowerLimit, upperLimit); 
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_declaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool_declaration ::= BOOLEAN ATOM_IDENTIFIER 
            {
              Object RESULT =null;
		int boolIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String boolId = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		// process the declaration of boolean type atoms
		 Utilities.processBoolDeclaration(boolId);  
		 
   		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atom_declaration ::= enum_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atom_declaration ::= int_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atom_declaration ::= bool_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atom_declaration_list ::= atom_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_declaration_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atom_declaration_list ::= atom_declaration_list atom_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_declaration_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atoms ::= atom_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atoms",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // del_code ::= atoms NT$1 agents NT$2 facts 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//handle the atom declarations...I put it here so the constraints would have been known at the time the atoms are processed for state values generation
	Utilities.processAtoms();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("del_code",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;




              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 

	//handle the atom declarations...
	//Utilities.processAtoms();
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= BEGIN del_code NT$0 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;


    // Now, we'll draw the graph
    //Generate the .dot file from which the DOT engine now draws the graph
    Utilities.generateGraph();
    Utilities.solveEpistemicConstraints();
    Utilities.generateDot();
    
	//Display stateLabelMap
    Utilities.displayStateLabelMap();
    
    //Display varValuesStateMap
    Utilities.displayVarValuesStateMap();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


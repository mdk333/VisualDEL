//
// @author Maduka Attamah
//
// Copyright 2011-2015 Maduka Attamah
//

package vdel.modelchecker;

import vdel.utilities.CalcFunctions;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 06 23:12:18 BST 2012
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 06 23:12:18 BST 2012
  */
public class ConstraintEvaluator extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstraintEvaluator() {super();}

  /** Constructor which sets the default scanner. */
  public ConstraintEvaluator(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstraintEvaluator(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\011\002\000\002\002\005\000\002\002" +
    "\004\000\002\012\002\000\002\002\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\013\002\000\002\014\002\000\002\005" +
    "\007\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\004\000\002\007\004\000\002\007\003\000\002" +
    "\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\022\010\021\011\017\012\020\026\014\031" +
    "\007\032\013\033\006\034\010\001\002\000\024\004\uffe7" +
    "\005\027\014\ufffe\015\054\016\057\017\055\020\061\021" +
    "\056\022\060\001\002\000\042\004\uffe3\005\uffe3\006\033" +
    "\007\032\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\031" +
    "\001\002\000\020\013\uffea\014\uffea\015\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\001\002\000\042\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\027\uffdb\001\002\000\020\013\uffe9\014\uffe9\015\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\001\002\000\042\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\027\uffdc\001\002\000\004\002\114\001\002\000" +
    "\016\015\100\016\103\017\101\020\105\021\102\022\104" +
    "\001\002\000\022\010\021\011\017\012\020\026\014\031" +
    "\007\032\013\033\006\034\010\001\002\000\016\014\001" +
    "\015\044\022\050\023\047\024\051\025\046\001\002\000" +
    "\042\004\uffdf\005\uffdf\006\uffdf\007\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\027\uffdf\001\002\000\012\010\021" +
    "\011\017\012\023\031\007\001\002\000\022\010\021\011" +
    "\017\012\020\026\014\031\007\032\013\033\006\034\010" +
    "\001\002\000\006\012\023\031\007\001\002\000\042\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\001\002\000\012\010\021\011\017" +
    "\012\023\031\007\001\002\000\010\004\uffe7\005\027\013" +
    "\026\001\002\000\004\004\037\001\002\000\042\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\001\002\000\012\010\021\011\017\012" +
    "\023\031\007\001\002\000\042\004\uffe4\005\uffe4\006\033" +
    "\007\032\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\031" +
    "\001\002\000\012\010\021\011\017\012\023\031\007\001" +
    "\002\000\012\010\021\011\017\012\023\031\007\001\002" +
    "\000\012\010\021\011\017\012\023\031\007\001\002\000" +
    "\042\004\uffe2\005\uffe2\006\uffe2\007\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\001\002\000\042\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\027\uffe1\001\002\000\042\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027" +
    "\uffe0\001\002\000\012\010\uffe6\011\uffe6\012\uffe6\031\uffe6" +
    "\001\002\000\012\010\021\011\017\012\023\031\007\001" +
    "\002\000\042\004\uffe5\005\uffe5\006\033\007\032\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\027\031\001\002\000\024" +
    "\004\uffe7\005\027\013\026\015\054\016\057\017\055\020" +
    "\061\021\056\022\060\001\002\000\016\013\045\015\044" +
    "\022\050\023\047\024\051\025\046\001\002\000\022\010" +
    "\021\011\017\012\020\026\014\031\007\032\013\033\006" +
    "\034\010\001\002\000\020\013\uffe8\014\uffe8\015\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\001\002\000\022\010\021" +
    "\011\017\012\020\026\014\031\007\032\013\033\006\034" +
    "\010\001\002\000\022\010\021\011\017\012\020\026\014" +
    "\031\007\032\013\033\006\034\010\001\002\000\022\010" +
    "\021\011\017\012\020\026\014\031\007\032\013\033\006" +
    "\034\010\001\002\000\022\010\021\011\017\012\020\026" +
    "\014\031\007\032\013\033\006\034\010\001\002\000\022" +
    "\004\uffe7\005\027\015\054\016\057\017\055\020\061\021" +
    "\056\022\060\001\002\000\020\013\ufff3\014\ufff3\015\044" +
    "\022\050\023\ufff3\024\ufff3\025\046\001\002\000\012\010" +
    "\021\011\017\012\023\031\007\001\002\000\012\010\021" +
    "\011\017\012\023\031\007\001\002\000\012\010\021\011" +
    "\017\012\023\031\007\001\002\000\012\010\021\011\017" +
    "\012\023\031\007\001\002\000\012\010\021\011\017\012" +
    "\023\031\007\001\002\000\012\010\021\011\017\012\023" +
    "\031\007\001\002\000\024\004\uffe7\005\027\013\ufff7\014" +
    "\ufff7\015\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\001\002" +
    "\000\024\004\uffe7\005\027\013\ufff5\014\ufff5\015\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002\000\024\004\uffe7" +
    "\005\027\013\ufff9\014\ufff9\015\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\001\002\000\024\004\uffe7\005\027\013\ufff6" +
    "\014\ufff6\015\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\001" +
    "\002\000\024\004\uffe7\005\027\013\ufff8\014\ufff8\015\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\001\002\000\024\004" +
    "\uffe7\005\027\013\ufffc\014\ufffc\015\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\001\002\000\020\013\ufffa\014\ufffa\015" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\001\002\000\020" +
    "\013\ufff4\014\ufff4\015\044\022\050\023\ufff4\024\ufff4\025" +
    "\046\001\002\000\020\013\ufff2\014\ufff2\015\044\022\050" +
    "\023\ufff2\024\ufff2\025\ufff2\001\002\000\020\013\ufffb\014" +
    "\ufffb\015\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001\002" +
    "\000\042\004\uffde\005\uffde\006\uffde\007\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\027\uffde\001\002\000\004\014" +
    "\076\001\002\000\004\002\000\001\002\000\020\013\ufff1" +
    "\014\ufff1\015\044\022\050\023\047\024\051\025\046\001" +
    "\002\000\004\032\113\001\002\000\004\032\112\001\002" +
    "\000\004\032\111\001\002\000\004\032\110\001\002\000" +
    "\004\032\107\001\002\000\004\032\106\001\002\000\020" +
    "\013\uffed\014\uffed\015\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\001\002\000\020\013\uffef\014\uffef\015\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\001\002\000\020\013\uffee\014" +
    "\uffee\015\uffee\022\uffee\023\uffee\024\uffee\025\uffee\001\002" +
    "\000\020\013\uffeb\014\uffeb\015\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\001\002\000\020\013\uffec\014\uffec\015\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\001\002\000\020\013" +
    "\ufff0\014\ufff0\015\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\001\002\000\004\002\uffff\001\002\000\004\014\116\001" +
    "\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\016\002\011\003\014\005\003\006\004\007" +
    "\015\010\010\001\001\000\006\012\114\013\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\076\005\051\006\004\007\015\010" +
    "\010\001\001\000\004\011\074\001\001\000\002\001\001" +
    "\000\006\007\073\010\010\001\001\000\014\003\042\005" +
    "\041\006\004\007\015\010\010\001\001\000\004\010\021" +
    "\001\001\000\002\001\001\000\012\005\023\006\004\007" +
    "\015\010\010\001\001\000\004\013\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\027\007\015\010" +
    "\010\001\001\000\002\001\001\000\006\007\035\010\010" +
    "\001\001\000\006\007\034\010\010\001\001\000\006\007" +
    "\033\010\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\037\001\001\000\010\006" +
    "\040\007\015\010\010\001\001\000\002\001\001\000\004" +
    "\013\024\001\001\000\002\001\001\000\014\003\072\005" +
    "\051\006\004\007\015\010\010\001\001\000\002\001\001" +
    "\000\014\003\071\005\051\006\004\007\015\010\010\001" +
    "\001\000\014\003\070\005\051\006\004\007\015\010\010" +
    "\001\001\000\014\003\067\005\051\006\004\007\015\010" +
    "\010\001\001\000\014\003\052\005\051\006\004\007\015" +
    "\010\010\001\001\000\004\013\024\001\001\000\002\001" +
    "\001\000\012\005\066\006\004\007\015\010\010\001\001" +
    "\000\012\005\065\006\004\007\015\010\010\001\001\000" +
    "\012\005\064\006\004\007\015\010\010\001\001\000\012" +
    "\005\063\006\004\007\015\010\010\001\001\000\012\005" +
    "\062\006\004\007\015\010\010\001\001\000\012\005\061" +
    "\006\004\007\015\010\010\001\001\000\004\013\024\001" +
    "\001\000\004\013\024\001\001\000\004\013\024\001\001" +
    "\000\004\013\024\001\001\000\004\013\024\001\001\000" +
    "\004\013\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstraintEvaluator$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstraintEvaluator$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstraintEvaluator$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstraintEvaluator$actions {


    CalcFunctions sFunctions = new CalcFunctions();
 
  private final ConstraintEvaluator parser;

  /** Constructor */
  CUP$ConstraintEvaluator$actions(ConstraintEvaluator parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConstraintEvaluator$do_action(
    int                        CUP$ConstraintEvaluator$act_num,
    java_cup.runtime.lr_parser CUP$ConstraintEvaluator$parser,
    java.util.Stack            CUP$ConstraintEvaluator$stack,
    int                        CUP$ConstraintEvaluator$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstraintEvaluator$result;

      /* select the action based on the action number */
      switch (CUP$ConstraintEvaluator$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // leaf ::= LPAREN arithmetic_expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		 RESULT = e; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("leaf",6, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // leaf ::= DOUBLE 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 System.out.println("found Double in leaf"); RESULT = d;  
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("leaf",6, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unary_expr ::= leaf 
            {
              Double RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = b; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("unary_expr",5, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unary_expr ::= SQUAREROOT leaf 
            {
              Double RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT =  sFunctions.squareRoot(b); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("unary_expr",5, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unary_expr ::= SQUARE unary_expr 
            {
              Double RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double u = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT =  sFunctions.xSquare(u); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("unary_expr",5, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= unary_expr 
            {
              Double RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double u = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = u; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= term MOD unary_expr 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double u = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = new Double(t.doubleValue() % u.doubleValue()); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term DIVIDE unary_expr 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double u = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = new Double(t.doubleValue() / u.doubleValue()); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term MULTIPLY unary_expr 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double u = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = new Double(t.doubleValue() * u.doubleValue()); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arithmetic_expr ::= term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = t; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",3, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arithmetic_expr ::= arithmetic_expr MINUS term 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 RESULT = new Double(e.doubleValue() - t.doubleValue()); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",3, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arithmetic_expr ::= arithmetic_expr NT$2 PLUS NT$3 term 
            {
              Double RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Double) ((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-4)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 System.out.println("found term"); RESULT = new Double(e.doubleValue() + t.doubleValue()); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",3, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-4)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Double RESULT =(Double) ((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
 System.out.println("found plus"); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("NT$3",10, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
 System.out.println("found expression"); 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean_expr ::= LPAREN boolean_expr RPAREN 
            {
              Boolean RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		 RESULT = be; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean_expr ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_expr ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_expr ::= IDENTIFIER GREATERTHANEQUAL IDENTIFIER 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 
		    		if(id.compareToIgnoreCase(idd) <= 0){
		    			RESULT = true;
		    		} else {
		    			RESULT = false;
		    		}
		    
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolean_expr ::= IDENTIFIER LESSTHANEQUAL IDENTIFIER 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 
		    		if(id.compareToIgnoreCase(idd) >= 0){
		    			RESULT = true;
		    		} else {
		    			RESULT = false;
		    		}
		    
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_expr ::= IDENTIFIER GREATERTHAN IDENTIFIER 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 
		    		if(id.compareToIgnoreCase(idd) < 0){
		    			RESULT = true;
		    		} else {
		    			RESULT = false;
		    		}
		    
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolean_expr ::= IDENTIFIER LESSTHAN IDENTIFIER 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 
		    		if(id.compareToIgnoreCase(idd) > 0){
		    			RESULT = true;
		    		} else {
		    			RESULT = false;
		    		}
		    
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolean_expr ::= IDENTIFIER NOTEQUAL IDENTIFIER 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 
		    		if(!id.equalsIgnoreCase(idd)){
		    			RESULT = true;
		    		} else {
		    			RESULT = false;
		    		}
		    
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolean_expr ::= IDENTIFIER DOUBLEEQUALS IDENTIFIER 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 
		    		if(id.equalsIgnoreCase(idd)){
		    			RESULT = true;
		    		} else {
		    			RESULT = false;
		    		}
		    
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean_expr ::= NOT boolean_expr 
            {
              Boolean RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(be.booleanValue()) RESULT = false; else RESULT = true; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean_expr ::= boolean_expr IMPLIES boolean_expr 
            {
              Boolean RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(!be.booleanValue() || t.booleanValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolean_expr ::= boolean_expr OR boolean_expr 
            {
              Boolean RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(be.booleanValue() || t.booleanValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // boolean_expr ::= boolean_expr AND boolean_expr 
            {
              Boolean RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(be.booleanValue() && t.booleanValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // boolean_expr ::= arithmetic_expr NOTEQUAL arithmetic_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.doubleValue() != t.doubleValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // boolean_expr ::= arithmetic_expr GREATERTHANEQUAL arithmetic_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.doubleValue() >= t.doubleValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolean_expr ::= arithmetic_expr GREATERTHAN arithmetic_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.doubleValue() > t.doubleValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolean_expr ::= arithmetic_expr LESSTHANEQUAL arithmetic_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.doubleValue() <= t.doubleValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // boolean_expr ::= arithmetic_expr LESSTHAN arithmetic_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.doubleValue() < t.doubleValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // boolean_expr ::= boolean_expr NOTEQUAL boolean_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.booleanValue() != t.booleanValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // boolean_expr ::= boolean_expr DOUBLEEQUALS boolean_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.booleanValue() == t.booleanValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // boolean_expr ::= arithmetic_expr DOUBLEEQUALS arithmetic_expr 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
		 if(e.doubleValue() == t.doubleValue()) RESULT = true; else RESULT = false; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= arithmetic_expr NT$1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;

              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
 RESULT = e; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		RESULT = start_val;
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstraintEvaluator$parser.done_parsing();
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement ::= boolean_expr NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)).value;

              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.elementAt(CUP$ConstraintEvaluator$top-2)), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()).right;
		Boolean be = (Boolean)((java_cup.runtime.Symbol) CUP$ConstraintEvaluator$stack.peek()).value;
 RESULT = (Boolean)be; 
              CUP$ConstraintEvaluator$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstraintEvaluator$stack.peek()), RESULT);
            }
          return CUP$ConstraintEvaluator$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


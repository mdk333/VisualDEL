package vdel.modelchecker;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 17 12:20:12 BST 2012
//----------------------------------------------------

import java.util.HashSet;
import vdel.EpistemicKeypad;
import vdel.utilities.CalcFunctions;
import vdel.utilities.Utilities;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 17 12:20:12 BST 2012
  */
public class ModelChecker extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ModelChecker() {super();}

  /** Constructor which sets the default scanner. */
  public ModelChecker(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ModelChecker(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\013\002\000\002\002\005\000\002\002" +
    "\004\000\002\014\002\000\002\002\005\000\002\015\002" +
    "\000\002\002\007\000\002\016\002\000\002\002\007\000" +
    "\002\017\002\000\002\002\007\000\002\012\005\000\002" +
    "\012\006\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\006" +
    "\000\002\012\007\000\002\012\010\000\002\012\004\000" +
    "\002\012\005\000\002\012\004\000\002\012\005\000\002" +
    "\012\006\000\002\012\007\000\002\012\004\000\002\012" +
    "\005\000\002\012\004\000\002\012\005\000\002\012\006" +
    "\000\002\012\007\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\003\000\002" +
    "\007\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\026\010\024\011\021\012\022\027\016\032" +
    "\015\033\004\034\014\037\010\040\007\041\012\001\002" +
    "\000\030\010\024\011\021\012\022\014\205\027\016\032" +
    "\015\033\004\034\014\037\010\040\007\041\012\001\002" +
    "\000\022\004\032\005\033\016\100\017\101\020\076\021" +
    "\077\022\102\023\075\001\002\000\042\004\uffc9\005\uffc9" +
    "\006\037\007\036\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\030\035\001\002\000\014\013\uffce\015\uffce\024\uffce\025" +
    "\uffce\026\uffce\001\002\000\042\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0" +
    "\001\002\000\042\004\uffc2\005\uffc2\006\uffc2\007\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2\001\002\000" +
    "\014\013\uffcd\015\uffcd\024\uffcd\025\uffcd\026\uffcd\001\002" +
    "\000\004\002\204\001\002\000\036\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\013\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\027\057\030\uffc1\031\056\001\002\000" +
    "\030\010\024\011\021\012\022\014\177\027\016\032\015" +
    "\033\004\034\014\037\010\040\007\041\012\001\002\000" +
    "\026\010\024\011\021\012\071\027\067\032\142\033\141" +
    "\034\025\037\010\040\007\041\012\001\002\000\012\015" +
    "\ufffe\024\163\025\164\026\162\001\002\000\042\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\013\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\030\uffc5\001\002\000\014\010\024\011\021\012" +
    "\027\034\025\037\010\001\002\000\026\010\024\011\021" +
    "\012\022\027\016\032\015\033\004\034\014\037\010\040" +
    "\007\041\012\001\002\000\012\015\001\024\046\025\047" +
    "\026\044\001\002\000\014\010\024\011\021\012\027\034" +
    "\025\037\010\001\002\000\042\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1" +
    "\001\002\000\042\004\uffc4\005\uffc4\006\uffc4\007\uffc4\013" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\001\002\000" +
    "\014\010\024\011\021\012\027\034\025\037\010\001\002" +
    "\000\010\004\032\005\033\013\031\001\002\000\042\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\013\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\030\uffbf\001\002\000\014\010\024\011\021" +
    "\012\027\034\025\037\010\001\002\000\014\010\024\011" +
    "\021\012\027\034\025\037\010\001\002\000\042\004\uffca" +
    "\005\uffca\006\037\007\036\013\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\030\035\001\002\000\014\010\024\011\021\012" +
    "\027\034\025\037\010\001\002\000\014\010\024\011\021" +
    "\012\027\034\025\037\010\001\002\000\014\010\024\011" +
    "\021\012\027\034\025\037\010\001\002\000\042\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\013\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\030\uffc8\001\002\000\042\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\030" +
    "\uffc7\001\002\000\042\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\001\002" +
    "\000\042\004\uffcb\005\uffcb\006\037\007\036\013\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\030\035\001\002\000\014\012" +
    "\053\027\050\032\015\033\004\034\051\001\002\000\004" +
    "\015\156\001\002\000\014\012\053\027\050\032\015\033" +
    "\004\034\051\001\002\000\014\012\053\027\050\032\015" +
    "\033\004\034\051\001\002\000\006\032\142\033\141\001" +
    "\002\000\006\027\057\031\056\001\002\000\014\013\ufff3" +
    "\015\ufff3\024\ufff3\025\ufff3\026\044\001\002\000\014\012" +
    "\053\027\050\032\015\033\004\034\051\001\002\000\012" +
    "\013\055\024\046\025\047\026\044\001\002\000\014\013" +
    "\ufff1\015\ufff1\024\ufff1\025\ufff1\026\ufff1\001\002\000\030" +
    "\010\024\011\021\012\022\014\134\027\016\032\015\033" +
    "\004\034\014\037\010\040\007\041\012\001\002\000\004" +
    "\031\060\001\002\000\030\010\024\011\021\012\022\014" +
    "\061\027\016\032\015\033\004\034\014\037\010\040\007" +
    "\041\012\001\002\000\010\012\121\027\116\034\117\001" +
    "\002\000\014\013\uffef\015\uffef\024\065\025\066\026\064" +
    "\001\002\000\014\013\ufff5\015\ufff5\024\046\025\047\026" +
    "\044\001\002\000\022\010\024\011\021\012\071\027\067" +
    "\034\025\037\010\040\007\041\012\001\002\000\022\010" +
    "\024\011\021\012\071\027\067\034\025\037\010\040\007" +
    "\041\012\001\002\000\022\010\024\011\021\012\071\027" +
    "\067\034\025\037\010\040\007\041\012\001\002\000\022" +
    "\010\024\011\021\012\071\027\067\034\025\037\010\040" +
    "\007\041\012\001\002\000\014\013\uffd9\015\uffd9\024\uffd9" +
    "\025\uffd9\026\064\001\002\000\022\010\024\011\021\012" +
    "\071\027\067\034\025\037\010\040\007\041\012\001\002" +
    "\000\024\004\032\005\033\013\031\016\100\017\101\020" +
    "\076\021\077\022\102\023\075\001\002\000\012\013\074" +
    "\024\065\025\066\026\064\001\002\000\014\013\uffcc\015" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\001\002\000\022\010\024" +
    "\011\021\012\071\027\067\034\025\037\010\040\007\041" +
    "\012\001\002\000\014\010\024\011\021\012\027\034\025" +
    "\037\010\001\002\000\014\010\024\011\021\012\027\034" +
    "\025\037\010\001\002\000\022\010\024\011\021\012\071" +
    "\027\067\034\025\037\010\040\007\041\012\001\002\000" +
    "\014\010\024\011\021\012\027\034\025\037\010\001\002" +
    "\000\014\010\024\011\021\012\027\034\025\037\010\001" +
    "\002\000\020\004\032\005\033\013\uffd2\015\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\001\002\000\020\004\032\005\033\013" +
    "\uffd5\015\uffd5\024\uffd5\025\uffd5\026\uffd5\001\002\000\034" +
    "\004\032\005\033\013\uffd7\015\uffd7\016\100\017\101\020" +
    "\076\021\077\022\102\023\075\024\uffd7\025\uffd7\026\uffd7" +
    "\001\002\000\014\013\uffd6\015\uffd6\024\065\025\066\026" +
    "\064\001\002\000\020\004\032\005\033\013\uffd3\015\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\001\002\000\020\004\032\005" +
    "\033\013\uffd4\015\uffd4\024\uffd4\025\uffd4\026\uffd4\001\002" +
    "\000\034\004\032\005\033\013\uffd1\015\uffd1\016\100\017" +
    "\101\020\076\021\077\022\102\023\075\024\uffd1\025\uffd1" +
    "\026\uffd1\001\002\000\014\013\uffd0\015\uffd0\024\065\025" +
    "\066\026\064\001\002\000\014\013\uffcf\015\uffcf\024\065" +
    "\025\066\026\064\001\002\000\014\013\uffda\015\uffda\024" +
    "\uffda\025\uffda\026\064\001\002\000\014\013\uffd8\015\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\001\002\000\010\012\121\027" +
    "\116\034\117\001\002\000\014\013\uffdc\014\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\001\002\000\012\014\132\024\125\025" +
    "\126\026\124\001\002\000\010\012\121\027\116\034\117" +
    "\001\002\000\012\013\123\024\125\025\126\026\124\001" +
    "\002\000\014\013\uffdb\014\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\001\002\000\010\012\121\027\116\034\117\001\002\000" +
    "\010\012\121\027\116\034\117\001\002\000\010\012\121" +
    "\027\116\034\117\001\002\000\014\013\uffdf\014\uffdf\024" +
    "\uffdf\025\uffdf\026\124\001\002\000\014\013\uffe0\014\uffe0" +
    "\024\uffe0\025\uffe0\026\124\001\002\000\014\013\uffde\014" +
    "\uffde\024\uffde\025\uffde\026\uffde\001\002\000\014\013\uffed" +
    "\015\uffed\024\uffed\025\uffed\026\uffed\001\002\000\014\013" +
    "\uffdd\014\uffdd\024\125\025\126\026\124\001\002\000\010" +
    "\012\121\027\116\034\117\001\002\000\014\013\ufff0\015" +
    "\ufff0\024\065\025\066\026\064\001\002\000\014\013\ufff6" +
    "\015\ufff6\024\046\025\047\026\044\001\002\000\012\014" +
    "\140\024\125\025\126\026\124\001\002\000\014\013\uffee" +
    "\015\uffee\024\uffee\025\uffee\026\uffee\001\002\000\030\010" +
    "\024\011\021\012\022\014\150\027\016\032\015\033\004" +
    "\034\014\037\010\040\007\041\012\001\002\000\030\010" +
    "\024\011\021\012\022\014\143\027\016\032\015\033\004" +
    "\034\014\037\010\040\007\041\012\001\002\000\010\012" +
    "\121\027\116\034\117\001\002\000\014\013\uffe3\015\uffe3" +
    "\024\065\025\066\026\064\001\002\000\014\013\uffe5\015" +
    "\uffe5\024\046\025\047\026\044\001\002\000\012\014\147" +
    "\024\125\025\126\026\124\001\002\000\014\013\uffe1\015" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\001\002\000\010\012\121" +
    "\027\116\034\117\001\002\000\014\013\uffe9\015\uffe9\024" +
    "\065\025\066\026\064\001\002\000\014\013\uffeb\015\uffeb" +
    "\024\046\025\047\026\044\001\002\000\012\014\154\024" +
    "\125\025\126\026\124\001\002\000\014\013\uffe7\015\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\001\002\000\014\013\ufff4\015" +
    "\ufff4\024\ufff4\025\ufff4\026\044\001\002\000\004\002\000" +
    "\001\002\000\014\013\ufff2\015\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\001\002\000\042\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\001\002" +
    "\000\004\015\176\001\002\000\026\010\024\011\021\012" +
    "\022\027\016\032\015\033\004\034\014\037\010\040\007" +
    "\041\012\001\002\000\026\010\024\011\021\012\022\027" +
    "\016\032\015\033\004\034\014\037\010\040\007\041\012" +
    "\001\002\000\026\010\024\011\021\012\022\027\016\032" +
    "\015\033\004\034\014\037\010\040\007\041\012\001\002" +
    "\000\012\015\ufffa\024\046\025\047\026\044\001\002\000" +
    "\004\015\167\001\002\000\004\002\ufff9\001\002\000\012" +
    "\015\ufffc\024\046\025\047\026\044\001\002\000\004\015" +
    "\172\001\002\000\004\002\ufffb\001\002\000\012\015\ufff8" +
    "\024\046\025\047\026\044\001\002\000\004\015\175\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufffd\001\002" +
    "\000\010\012\121\027\116\034\117\001\002\000\014\013" +
    "\uffe4\015\uffe4\024\065\025\066\026\064\001\002\000\014" +
    "\013\uffe6\015\uffe6\024\046\025\047\026\044\001\002\000" +
    "\012\014\203\024\125\025\126\026\124\001\002\000\014" +
    "\013\uffe2\015\uffe2\024\uffe2\025\uffe2\026\uffe2\001\002\000" +
    "\004\002\uffff\001\002\000\010\012\121\027\116\034\117" +
    "\001\002\000\014\013\uffea\015\uffea\024\065\025\066\026" +
    "\064\001\002\000\014\013\uffec\015\uffec\024\046\025\047" +
    "\026\044\001\002\000\012\014\211\024\125\025\126\026" +
    "\124\001\002\000\014\013\uffe8\015\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\020\002\012\003\016\004\004\005\005\006" +
    "\017\010\010\012\022\001\001\000\016\003\205\004\004" +
    "\005\005\006\017\010\010\012\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\177\004\004\005\005\006\017" +
    "\010\010\012\200\001\001\000\014\003\112\004\004\005" +
    "\005\006\017\010\010\001\001\000\004\014\160\001\001" +
    "\000\002\001\001\000\006\006\157\010\010\001\001\000" +
    "\016\003\072\004\071\005\005\006\017\010\010\012\053" +
    "\001\001\000\004\013\044\001\001\000\006\006\025\010" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\027\005\005\006\017\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\042\006\017\010\010" +
    "\001\001\000\010\005\033\006\017\010\010\001\001\000" +
    "\002\001\001\000\006\006\041\010\010\001\001\000\006" +
    "\006\040\010\010\001\001\000\006\006\037\010\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\156\001\001\000\002\001" +
    "\001\000\004\012\154\001\001\000\004\012\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\134\004\004\005\005\006\017\010\010\012" +
    "\135\001\001\000\002\001\001\000\016\003\061\004\004" +
    "\005\005\006\017\010\010\012\062\001\001\000\004\007" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\114\004\004\005\005\006\017\010\010\001\001\000" +
    "\014\003\113\004\004\005\005\006\017\010\010\001\001" +
    "\000\014\003\067\004\004\005\005\006\017\010\010\001" +
    "\001\000\014\003\112\004\004\005\005\006\017\010\010" +
    "\001\001\000\002\001\001\000\014\003\072\004\071\005" +
    "\005\006\017\010\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\111\004\110\005" +
    "\005\006\017\010\010\001\001\000\012\004\107\005\005" +
    "\006\017\010\010\001\001\000\012\004\106\005\005\006" +
    "\017\010\010\001\001\000\014\003\105\004\104\005\005" +
    "\006\017\010\010\001\001\000\012\004\103\005\005\006" +
    "\017\010\010\001\001\000\012\004\102\005\005\006\017" +
    "\010\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\130\001\001\000\004\007\127\001\001\000\004\007" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\150\004\004\005" +
    "\005\006\017\010\010\012\151\001\001\000\016\003\143" +
    "\004\004\005\005\006\017\010\010\012\144\001\001\000" +
    "\004\007\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\114\004\004\005\005\006\017\010\010\012\172\001" +
    "\001\000\016\003\113\004\004\005\005\006\017\010\010" +
    "\012\167\001\001\000\016\003\067\004\004\005\005\006" +
    "\017\010\010\012\164\001\001\000\004\016\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ModelChecker$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ModelChecker$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ModelChecker$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/* Overiding this method so it could say the column number of the error as well 
   as display the error on the calculator screen */

    public void report_error(String message, Object info) {
   	   String m = "";
   	   if((info instanceof java_cup.runtime.Symbol) && ((java_cup.runtime.Symbol)info).value != null){
        	m = new String("Syntax Error " + ((java_cup.runtime.Symbol)info).value.toString());
   	   } else {
   	   	m = new String("Syntax Error ");
   	   }
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
               
        /* Add to the end of the StringBuffer error message
            the column number of the error in the input. */
        
        m = m + ": column "+ (s.right);
        Utilities.thereWasError  = true;      
  
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on the screen. */
        EpistemicKeypad.displayTextField.setText(m.toString());

	  
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ModelChecker$actions {


    CalcFunctions sFunctions = new CalcFunctions();
 
  private final ModelChecker parser;

  /** Constructor */
  CUP$ModelChecker$actions(ModelChecker parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ModelChecker$do_action(
    int                        CUP$ModelChecker$act_num,
    java_cup.runtime.lr_parser CUP$ModelChecker$parser,
    java.util.Stack            CUP$ModelChecker$stack,
    int                        CUP$ModelChecker$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ModelChecker$result;

      /* select the action based on the action number */
      switch (CUP$ModelChecker$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // leaf ::= LPAREN arithmetic_expr RPAREN 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 RESULT = "(".concat(be).concat(")"); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("leaf",6, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // leaf ::= DOUBLE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Double id = (Double)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
        RESULT = id.toString(); 
        
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("leaf",6, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // leaf ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
        RESULT = id;
        Utilities.inConstraintIdentifiers.add(id); 
        
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("leaf",6, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary_expr ::= leaf 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = l; 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_expr ::= SQUARE unary_expr 
            {
              String RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = "sqr".concat(ue); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unary_expr ::= SQUAREROOT unary_expr 
            {
              String RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = "sqrt".concat(ue); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("unary_expr",4, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= unary_expr 
            {
              String RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = ue; 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= term MOD unary_expr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = t.concat("|").concat(ue); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= term DIVIDE unary_expr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = t.concat("/").concat(ue); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term MULTIPLY unary_expr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String ue = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = t.concat("*").concat(ue); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithmetic_expr ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = t; 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",2, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithmetic_expr ::= arithmetic_expr MINUS term 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("-").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",2, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithmetic_expr ::= arithmetic_expr PLUS term 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("+").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",2, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolean_expr ::= LPAREN boolean_expr RPAREN 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 RESULT = "(".concat(be).concat(")"); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolean_expr ::= FALSE 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolean_expr ::= TRUE 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean_expr ::= NOT boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = "!".concat(be); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_expr ::= arithmetic_expr NOTEQUAL boolean_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("!=").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean_expr ::= arithmetic_expr NOTEQUAL arithmetic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("!=").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolean_expr ::= arithmetic_expr GREATERTHANEQUAL arithmetic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat(">=").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolean_expr ::= arithmetic_expr GREATERTHAN arithmetic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat(">").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean_expr ::= arithmetic_expr LESSTHANEQUAL arithmetic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("<=").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean_expr ::= arithmetic_expr LESSTHAN arithmetic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("<").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolean_expr ::= arithmetic_expr DOUBLEEQUALS boolean_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("==").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_expr ::= arithmetic_expr DOUBLEEQUALS arithmetic_expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = e.concat("==").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_expr ::= boolean_expr IMPLIES boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = be.concat("->").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean_expr ::= boolean_expr OR boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = be.concat("||").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean_expr ::= boolean_expr AND boolean_expr 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = be.concat("&&").concat(t); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("boolean_expr",1, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // phi ::= LPAREN phi RPAREN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 RESULT = "(".concat(p).concat(")"); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("phi",5, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // phi ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = id; 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("phi",5, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // phi ::= NOT phi 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = "!".concat(p); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("phi",5, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // phi ::= phi IMPLIES phi 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = p1.concat("->").concat(p2); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("phi",5, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // phi ::= phi OR phi 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = p1.concat("||").concat(p2); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("phi",5, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // phi ::= phi AND phi 
            {
              String RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 RESULT = p1.concat("&&").concat(p2); 
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("phi",5, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // epistemic_expr ::= NOT DISTKNOWLEDGE BRACKET phi BRACKET 
            {
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTDistKNOWSPHIMC(p);
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // epistemic_expr ::= DISTKNOWLEDGE BRACKET phi BRACKET 
            {
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		  	  	RESULT = Utilities.distKnowsPHIExpressionMC(p);
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // epistemic_expr ::= NOT DISTKNOWLEDGE boolean_expr 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		  
		  	  		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTDistKNOWSBEMC(be);
		  	  	
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // epistemic_expr ::= DISTKNOWLEDGE boolean_expr 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
		  	  
		  	  	RESULT = Utilities.distKnowsBooleanExpressionMC(be);
		       
		  	  
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // epistemic_expr ::= NOT DISTKNOWLEDGE epistemic_expr 
            {
              Object[] RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	
		  	  	RESULT = Utilities.epistemicExpressionNOTDistKnowsEPIEXPRMC(epe);
			  
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // epistemic_expr ::= DISTKNOWLEDGE epistemic_expr 
            {
              Object[] RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	
			  	RESULT = Utilities.distKnowsEpistemicExpressionMC(epe);
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // epistemic_expr ::= NOT EVERYBODYKNOWS BRACKET phi BRACKET 
            {
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTEveryBodyKNOWSPHIMC(p);
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // epistemic_expr ::= EVERYBODYKNOWS BRACKET phi BRACKET 
            {
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		  	  	RESULT = Utilities.everyBodyKnowsPHIExpressionMC(p);
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // epistemic_expr ::= NOT EVERYBODYKNOWS boolean_expr 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		  
		  	  		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTEveryBodyKNOWSBEMC(be);
		  	  	
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // epistemic_expr ::= EVERYBODYKNOWS boolean_expr 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
		  	  
		  	  	RESULT = Utilities.everyBodyKnowsBooleanExpressionMC(be);
		       
		  	  
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // epistemic_expr ::= NOT EVERYBODYKNOWS epistemic_expr 
            {
              Object[] RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	
		  	  	RESULT = Utilities.epistemicExpressionNOTEveryBodyKnowsEPIEXPRMC(epe);
			  
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // epistemic_expr ::= EVERYBODYKNOWS epistemic_expr 
            {
              Object[] RESULT =null;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	
			  	RESULT = Utilities.everyBodyKnowsEpistemicExpressionMC(epe);
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // epistemic_expr ::= IDENTIFIER NOT KNOWS BRACKET phi BRACKET 
            {
              Object[] RESULT =null;
		int agleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-5)).left;
		int agright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-5)).right;
		String ag = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTKNOWSPHI(ag, p);
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-5)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // epistemic_expr ::= IDENTIFIER KNOWS BRACKET phi BRACKET 
            {
              Object[] RESULT =null;
		int agleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).left;
		int agright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).right;
		String ag = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		  	  	RESULT = Utilities.knowsPHIExpressionMC(ag, p);
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // epistemic_expr ::= IDENTIFIER NOT KNOWS boolean_expr 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		  
		  	  		  	  	
		  	  	RESULT = Utilities.epistemicExpressionNOTKNOWSBEMC(id, be);
		  	  	
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // epistemic_expr ::= IDENTIFIER KNOWS boolean_expr 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
		  	  
		  	  	RESULT = Utilities.knowsBooleanExpressionMC(id, be);
		       
		  	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // epistemic_expr ::= LPAREN epistemic_expr RPAREN 
            {
              Object[] RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		Object[] ep = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		 
		   	  	RESULT = ep; 
		   	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // epistemic_expr ::= epistemic_expr IMPLIES epistemic_expr 
            {
              Object[] RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ep = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
		   	  	
		  	  	RESULT = Utilities.epistemicExpressionIMPLIESMC(ep, epe);
		   	  
		   	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // epistemic_expr ::= epistemic_expr OR epistemic_expr 
            {
              Object[] RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ep = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
		   	  	RESULT = Utilities.epistemicExpressionORMC(ep, epe);
		   	  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // epistemic_expr ::= epistemic_expr AND epistemic_expr 
            {
              Object[] RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ep = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	
		  	  	RESULT = Utilities.epistemicExpressionANDMC(ep, epe);
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // epistemic_expr ::= IDENTIFIER NOT KNOWS epistemic_expr 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)).value;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	
		  	  	RESULT = Utilities.epistemicExpressionNOTKNOWSEPIEXPRMC(id, epe);
			  
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-3)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // epistemic_expr ::= IDENTIFIER KNOWS epistemic_expr 
            {
              Object[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int epeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eperight = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] epe = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
		 
			  	// access the set S of all states where lower epistemic expressions are true
			  	// for each of all states w, select those states in which the given agent has all its accessibilities (without excetption) in the set S 
			  	//i.e. if all w's successor states (following the accessibility of the agent in question) are a subset of S...then select w
			  	RESULT = Utilities.knowsEpistemicExpressionMC(id, epe);
			  
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("epistemic_expr",8, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= boolean_expr IMPLIES epistemic_expr NT$4 SEMI 
            {
              Object[] RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;

              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;

		   	Object[] obj = Utilities.solveGlobalBooleanExpressionMC(be);
		   	ee = Utilities.epistemicExpressionIMPLIESMC(obj, ee);
		   	RESULT = ee;
		   
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= boolean_expr OR epistemic_expr NT$3 SEMI 
            {
              Object[] RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;

              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;

		   	Object[] obj = Utilities.solveGlobalBooleanExpressionMC(be);
		   	ee = Utilities.epistemicExpressionORMC(obj, ee);
		   	RESULT = ee;
		   
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= boolean_expr AND epistemic_expr NT$2 SEMI 
            {
              Object[] RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;

              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-4)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;

		   	Object[] obj = Utilities.solveGlobalBooleanExpressionMC(be);
		   	ee = Utilities.epistemicExpressionANDMC(obj, ee);
		   	RESULT = ee;
		   	
		   
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= boolean_expr NT$1 SEMI 
            {
              Object[] RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;

              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object[] RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		String be = (String)((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;
 
		   	 RESULT = Utilities.solveGlobalBooleanExpressionMC(be);
		   
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).right;
		Object[] start_val = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		RESULT = start_val;
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ModelChecker$parser.done_parsing();
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement ::= epistemic_expr NT$0 SEMI 
            {
              Object[] RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object[]) ((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)).value;

              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.elementAt(CUP$ModelChecker$top-2)), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object[] RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()).right;
		Object[] ee = (Object[])((java_cup.runtime.Symbol) CUP$ModelChecker$stack.peek()).value;

		   	// here check if the returned set contains the state(s) in question
		   	 RESULT = ee;
		   
              CUP$ModelChecker$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), ((java_cup.runtime.Symbol)CUP$ModelChecker$stack.peek()), RESULT);
            }
          return CUP$ModelChecker$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

